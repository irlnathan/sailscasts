<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[sailsCasts]]></title>
  <link href="http://irlnathan.github.io/sailscasts/atom.xml" rel="self"/>
  <link href="http://irlnathan.github.io/sailscasts/"/>
  <updated>2015-04-04T13:41:29-05:00</updated>
  <id>http://irlnathan.github.io/sailscasts/</id>
  <author>
    <name><![CDATA[irl nathan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Building an Angular Application in Sails: Ep6 - User Authentication in Angular and Sails.]]></title>
    <link href="http://irlnathan.github.io/sailscasts/blog/2015/04/04/building-an-angular-application-in-sails-ep6-user-authentication-in-angular-and-sails/"/>
    <updated>2015-04-04T13:39:00-05:00</updated>
    <id>http://irlnathan.github.io/sailscasts/blog/2015/04/04/building-an-angular-application-in-sails-ep6-user-authentication-in-angular-and-sails</id>
    <content type="html"><![CDATA[<iframe width="640" height="390" src="http://www.youtube.com/embed/IqpjIQ0pfkA" frameborder="0" allowfullscreen></iframe>


<h3>Signup for the Treeline Beta <a href="http://treeline.io">here</a>.</h3>

<p>Follow me on twitter <a href="https://twitter.com/irlnathan">here</a>.</p>

<p>Subscribe to the sailscasts mailing list <a href="http://irlnathan.github.io/sailscastsnewsletter/">here</a>.</p>

<h1>Transcript</h1>

<p>Howdy.</p>

<p>In the last episode we finished out the signup page.  We now want to take that information and allow users to login, better known as user authentication.  So far we&rsquo;ve created one Angular module for the signup page connected to our Sails API. And this is under a broader category of public pages or those pages that don&rsquo;t require a user to be logged in to see them.  We also need a homepage that will also be public.  Finally we need a view, I&rsquo;m going to call the dashboard that will require that the user be logged in to our back-end.</p>

<p>So we have three Angular modules for activityOverlordv2.0.  You can of course accomplish the same end result in a variety of different ways, but I&rsquo;ve chosen this approach for simplicity and ease of SEO.</p>

<p>Ok, let&rsquo;s start with the homepage.</p>

<p>We&rsquo;ll first replace the current mark-up in homepage.ejs within the view folder with this new mark-up.  The markup contains our top level navigation, which includes the sign in button that triggers a <code>PUT</code> request to <code>/login</code>,  as well as a sign-up button that triggers a <code>GET</code> request to <code>/signup</code>. I realize I&rsquo;m going through this pretty fast but don&rsquo;t despair, I have a repo that has all of the code for your review.</p>

<p>Let&rsquo;s look at the Angular module and controller for the homepage.   The homepage and signup module&rsquo;s are identical both inject the toastr and compareTo services.  The homepage controller adds a new method to the scope called <code>submitLoginForm</code>.  Similar to signup form, <code>submitLoginForm</code> initially sets the loading state to <code>true</code>.  We then make a <code>PUT</code> request to <code>/login</code> passing in an <code>email</code> field as well as a <code>password</code> field from the $scope object.  If the request is successful, we&rsquo;ll make the equivalent of the a <code>GET</code> request to <code>/</code>.  If we&rsquo;re unsuccessful we&rsquo;ll handle the known errors, in this case a bad email/password combination through the <code>toastr</code> service and return.  We&rsquo;ll also handle any unexpected error here.  Finally, in either case we&rsquo;re toggle the <code>loginForm</code> loading state back to false.</p>

<p>So now that we have the front-end set up for the <code>Homepage</code>, let&rsquo;s switch gears to the back-end Sails API.</p>

<p>The first thing I want to do is handle the <code>PUT</code> request to <code>/login</code>.   So I&rsquo;ll add that <code>route</code> to the <code>routes.js</code> file here. We want this to trigger a <code>login</code> action in our <code>UserControlller</code>.  Next, we&rsquo;ll head over to our user controller in <code>UserController.js</code>.  So let&rsquo;s add the add the <code>login</code> action.  The next block of code I&rsquo;ll add first takes the email address that was passed from the login form and searches our <code>user</code> model for an existing user. If it doesn&rsquo;t find one we&rsquo;ll send back a <code>404</code> status which will trigger the <code>toastr</code> message in the HomePageController.  Next, we&rsquo;ll be using another machinepack, called machinepack-passwords.  Within the machinepack we&rsquo;ll use the <code>checkPassword</code> machine passing in the user provided password from the login form as well as the encrypted password found by the <code>findOne</code> method of our <code>user</code> model.  Within this <code>machine</code> we handle any unexpected error first and then if the <code>passwords</code> don&rsquo;t match we again send a <code>404 status</code> via <code>res.notFound()</code>.  For reference, these responses can be found in the responses folder here.  If we get a match, we need to log the user in so we&rsquo;ll create a new parameter on the session via <code>req.session.me</code> and give it the value of the <code>id</code> of the user we found earlier with <code>findOne</code> method of the <code>user</code> model.  The last thing we need to do is let the front-end know everything went well and we do that by returning with <code>res.ok()</code>.</p>

<p>Let&rsquo;s see all of this in action.  I&rsquo;ll start Sails with <code>sails lift</code> and we&rsquo;ve got an issue here.  I know what it is because I&rsquo;m old and forgetful. So, I&rsquo;m going to go into the <code>routes.js</code> file and you&rsquo;ll see that I just missed a comma here. So let&rsquo;s go back and try that again. Okay, Sails is up and running, let&rsquo;s go to the browser and let&rsquo;s hit <code>localhost:1337</code>. Okay, so the reason we&rsquo;re getting a <code>404</code> not found is we don&rsquo;t have a route that handles a <code>GET</code> request to <code>/</code>. Now we could remedy this very quickly by going back to the <code>routes.js</code> file, and we&rsquo;ll create a route here, that handles a <code>GET</code> request to <code>/</code>, which will trigger the homepage and we&rsquo;ll restart Sails here&hellip;go back into the browser and refresh and ther&rsquo;s our homepage and that&rsquo;s great.  But what I really want is a way to marshall between whether a user is authenticated, that is, logged in, and if they&rsquo;re logged in I want to display one front end and if they&rsquo;re not logged in a different front end. I can do that by adding a page controller to Sails.  So let&rsquo;s do that. First, I&rsquo;ll add the controller via <code>sails generate controller page</code>. Now let&rsquo;s go back into Atom and we have our <code>PageController</code> here which is empty.  I&rsquo;m going to add an action here <code>showHomePage</code>.</p>

<p>We first check if the user is logged in via the <code>me</code> parameter on the session, so, if <code>req.session.me</code> does not exist, I want to load the homepage and I&rsquo;m going to do that by return <code>res.view('homepage')</code>. Otherwise if the user is logged in, I&rsquo;m going to use the <code>findOne</code> method of the <code>user</code> model to look for that user. So I&rsquo;ll pass in the <code>userId</code> which is the value of the <code>me</code> parameter on the session. First I&rsquo;ll look for an unexpected error here and I&rsquo;ll handle that with <code>res.negotiate</code> if it exists. If I don&rsquo;t find a user, I&rsquo;m going to return the user to the homepage. Now if I do find a user, I&rsquo;m going to return a view that we haven&rsquo;t created yet called <code>dashboard</code>. I&rsquo;m going to bootstrap some information that I found via the <code>findOne</code> method of the user model on the page itself.</p>

<p>Before we create the dashboard view you may be asking what&rsquo;s going to trigger this <code>showHomePage</code> action. Well, we&rsquo;re going to do that by going into, <code>routes.js</code> and substituting this current view with our <code>PageController</code> and our <code>PageController</code> action <code>showHomePage</code>. So now any time there&rsquo;s a <code>GET</code> request to <code>/</code> our page controller will marshall which front end the user receives.</p>

<p>Now let&rsquo;s implement our dashboard page.  The mark-up for the dashboard page is straightforward.  As with the signup and homepage views, the dashboard view will have some top level navigation.  The part I want to concentrate on is the bootstrapped data we get from the page controller&rsquo;s <code>showHomePage</code> action.  So using <code>ejs</code> we&rsquo;ll add the parameters of the <code>me</code> object from the <code>showHOmePage</code> action on to <code>window.SAILS_LOCALS</code>.</p>

<p>Next, let&rsquo;s add the very minimal dashboard module and controller. I&rsquo;ve added these files under a separate folder named <code>private</code> to distinguish between the Angular code that will be executed when a user is authenticated and code that is public and does not require authentication.</p>

<p>I want to ensure that the new Angular modules I&rsquo;ve added will be loaded before any controllers, so I&rsquo;ll go back to <code>pipeline.js</code> found in the <code>tasks</code> folder and add the path to the two new modules &mdash; <code>HomepageModule</code> and `DashboardModule&#8217;.  This will insure that the modules will be loaded into the page first.</p>

<p>Okay, let&rsquo;s see this all in action. So I&rsquo;ll start Sails, with <code>sails lift</code>, and then navigate my browser to <code>localhost:1337</code>.  In the previous episode we created an account, <code>nikola@tesla.com</code> with the password <code>123456</code> and I&rsquo;m going to use that now.  Now if you don&rsquo;t have that user created, no big deal, just click on the sign up now button and create that user, <code>nikola@tesla.com</code> with the password <code>123456</code>, then go back to <code>localhost:1337</code> and start from there&hellip;and we have our dashboard page. And if we view the page source, we can see that we have our bootstrap user right here on the page.  So let&rsquo;s go back to the <code>PageController</code> really quickly here&hellip;<code>req.session.me</code> existed, we used that with the <code>findOne</code> method of the <code>user</code> model&hellip;it found the user and then passed the user object via the <code>me</code> parameter and bootstrapped it onto the dashboard page.</p>

<p>So there are a couple of things we still need to implement here. We have this sign-out link, that if i click on it it&rsquo;s going to give us a <code>404</code> and that&rsquo;s because we don&rsquo;t have a route that handles that link&hellip;so this link is making a <code>GET</code> request to <code>/logout</code> and we don&rsquo;t have a route for that so let&rsquo;s take care of that first.  So now that <code>GET</code> request to <code>/logout</code> will be tied to or will trigger the <code>UserController</code> and this new action on the controller. So let&rsquo;s go up to <code>UserController</code> and let&rsquo;s add a <code>logout</code> action.</p>

<p>So similar to our login action we&rsquo;re going to look for the user id on <code>req.session.me</code>&hellip;we&rsquo;re going to pass that to the <code>findOne</code> method of our <code>user</code> model&hellip;we&rsquo;re going to handle the errors if they exist and if it finds a user, we&rsquo;re going to essentially log that user out by making <code>req.session.me</code> equal to <code>null</code>. Then we&rsquo;re going to return with a new response, <code>backToHomePage()</code>. So let&rsquo;s take a look at that response.</p>

<p>So this response is basically for convenience&hellip;if logout were an AJAX request, Sails will know that that request just wants a JSON status code response. In our case we&rsquo;re making a <code>GET</code> request via the browser, so we just want to redirect back to <code>/</code> and let our page controller handle it.  Okay let&rsquo;s see this in action.</p>

<p>So I&rsquo;ll go and restart Sails, and we&rsquo;ll go back and log-in.  So now when I hit the signout link the <code>PageController</code> sends me back to the homepage.</p>

<p>There&rsquo;s just a couple of other things we need to do. Within the <code>UserController</code>, <code>signup</code> action we want the user to be logged in after they&rsquo;re signed up. So we&rsquo;ll do that right here. And within the signup page controller, on a successful signup we made a <code>GET</code> request via the browser to <code>/user</code> and now we just want to ake that <code>/</code>.</p>

<p>Let&rsquo;s go ahead and restart one more time. And we&rsquo;ll now go to signup, and I&rsquo;ll create a new user <code>b</code>, <code>b@b.com</code>&hellip;and everything works.  So the user was created and logged-in&hellip;and let&rsquo;s take a look at the page source&hellip;and there we are there&rsquo;s our bootstrapped data.</p>

<p>Thanks for making it through the many voices of Sailscasts.  Although it might seem that there are different Irl&rsquo;s on this Sailscast, I assure you that it was the same ole guy throughout&hellip;al beit Allergy-challenged.  So now we know how to create a user, save it to a database using the Sails ORM, and then use that information to authenticate a user marshalling between different Angular front-ends depending upon the user&rsquo;s log-in status.</p>

<p>There&rsquo;s been quite a bit going on in Sails and Treeline so expect an update shortly via the Sailscasts mailing list.  If you&rsquo;re not signed up, head over here to subscribe and you can always follow me on Twitter here.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building an Angular Application in Treeline Sneak Peak: Implementing the signup page in treeline.]]></title>
    <link href="http://irlnathan.github.io/sailscasts/blog/2015/03/10/building-an-angular-application-in-treeline-sneak-peak-implementing-the-signup-page-in-treeline/"/>
    <updated>2015-03-10T11:48:00-05:00</updated>
    <id>http://irlnathan.github.io/sailscasts/blog/2015/03/10/building-an-angular-application-in-treeline-sneak-peak-implementing-the-signup-page-in-treeline</id>
    <content type="html"><![CDATA[<iframe width="640" height="390" src="http://www.youtube.com/embed/KH5E2TL-_e8" frameborder="0" allowfullscreen></iframe>


<h3>Signup for the Treeline Beta <a href="http://treeline.io">here</a>.</h3>

<p>Follow me on twitter <a href="https://twitter.com/irlnathan">here</a>.</p>

<p>Subscribe to the sailscasts mailing list <a href="http://irlnathan.github.io/sailscastsnewsletter/">here</a>.</p>

<h1>Transcript</h1>

<p>Howdy.</p>

<p>So, I wanted to do a quick screencast previewing a new project from the Sails crew called Treeline.  So, let&rsquo;s get busy.</p>

<p>In the last two episodes we implemented the <code>/signup</code> request via Sails blueprints and then a custom controller action.  Today, I want to show you how I would do this in Treeline.  So I have a Treeline project here, which should look very similar to a Sails project because that&rsquo;s what it is with some very powerful additions.  I&rsquo;ve copied the assets folder from our existing activityOverlord20 project to the assets folder here.  So we have the same front-end asset structure, but I&rsquo;m going to create the back-end api in treeline.</p>

<p>So here I am in the Main Treeline Dashboard. We&rsquo;ll go to apps, we&rsquo;ll create a new app, and not surprisingly we&rsquo;ll call it activityoverlord20.  And the first thing we&rsquo;re going to do is create our model.  Now, in the past episode we created a user mode.  We&rsquo;ll add attributes to that model the first being name and notice that I&rsquo;m going to add an example, and treeline will infer which type is appropriate.   Next, I&rsquo;ll add the other attributes title, email, password, and gravatar url.</p>

<p>So now that we have our user model let&rsquo;s define the two routes that our front end requires.  The first route will be GET /signup.  This takes us into the circuit view.  Since we just want to display our signup.ejs view we can specify that in an empty circuit here. Okay, next I&rsquo;ll create the route to POST /signup.  As you may recall we first wanted to take the password from our form and encrypt it.  We used node-machines to do that.  You can think of treeline as the visual interface for node-machines.  So I&rsquo;ll just drag the encrypt password machine as a part that will fit on something called a circuit.  And then I&rsquo;ll access the password field from our signup page via a route paramter.</p>

<p>Next we want to convert an email address into a gravatar url.   I&rsquo;ll search for the gravatar machinepack and install it.  And from with that machinepack I&rsquo;ll get the getImageUrl machine and put it on our circuit as well. Now similar to what we did with the encrypt password, I need to get our email address from our form and I&rsquo;ll do that with a route parameter.</p>

<p>At this point we wanted to make sure that we had unique email addresses and if we didn&rsquo;t to let the front in know via a 409 status code.  So I&rsquo;ll drag a findone user machine over to our circuit and look up the email address provided by our form in the user model.  If a record is found, we know the email address is taken and we want to let the front end know so I&rsquo;ll respond with a 409 status.  If a record is not found, we want to go ahead and create the user so I&rsquo;ll drag a create user machine over and start connecting the user model with our form fields.  We&rsquo;ll do this mainly through route parameters, so for the name we&rsquo;ll get the route parameter, for the password we&rsquo;re going to actually get the output of our encrypt password machine.  For the email we&rsquo;ll go ahead and use a route parameter, we&rsquo;ll do the same for the title field, and finally for the gravatar url we&rsquo;ll use the output of the gravatar machine.</p>

<p>Okay let&rsquo;s see all of this in action.  So we&rsquo;ve built the api in Treeline and Treeline syncs the controller and model with our local project when I lift it using Treeline preview. So let&rsquo;s head to our browser and navigate to localhost:1337/signup which will make the GET request to <code>/signup</code> and our signup view.  Next, let&rsquo;s go ahead and create a User record &ndash; Nikola Tesla.</p>

<p>Let&rsquo;s go back to the signup page and create Nikola Tesla again and see if our duplicate email message is triggered.</p>

<p>And there it is&hellip;so this really just scratches the surface of the power of treeline.  In addition to the activityoverlord20 screencasts I plan to do additional videos on this new tool.  If you&rsquo;re interested in using treeline, head over to treeline.io and sign up for the beta.  As always thanks for watching.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building an Angular Application in Sails: Ep5 - Creating custom actions and an intro to node-machines.]]></title>
    <link href="http://irlnathan.github.io/sailscasts/blog/2015/03/06/building-an-angular-application-in-sails-creating-custom-actions-and-an-intro-to-node-machines/"/>
    <updated>2015-03-06T17:04:00-06:00</updated>
    <id>http://irlnathan.github.io/sailscasts/blog/2015/03/06/building-an-angular-application-in-sails-creating-custom-actions-and-an-intro-to-node-machines</id>
    <content type="html"><![CDATA[<iframe width="640" height="390" src="http://www.youtube.com/embed/jaGpf7t5y0Q" frameborder="0" allowfullscreen></iframe>


<p>Follow me on twitter <a href="https://twitter.com/irlnathan">here</a>.</p>

<p>Subscribe to the sailscasts mailing list <a href="http://irlnathan.github.io/sailscastsnewsletter/">here</a>.</p>

<p>The repo for this episode can be found <a href="https://github.com/irlnathan/activityoverlord20">here</a>.</p>

<h1>Transcript</h1>

<p>In the last episode we implemented a request to <code>/signup</code> using a Sails blueprint action.  The default blueprint create action is fine but I really don&rsquo;t want to save passwords in clear text and I also want to generate a gravatar for each user.  Let&rsquo;s overwrite the blueprint create action with our own signup action. This will also let me introduce a new concept to the Sails community &mdash; node machines.</p>

<p>So let&rsquo;s head back to the editor and open up the UserController.js file.   I&rsquo;m going to create an empty signup action here:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">signup</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">ok</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, let&rsquo;s navigate your browser to node-machine.org which is kind of the mothership of node-machine information.  The first thing to understand is that machines are built on the existing and very powerful node module framework.  Second, the node-machine specification and the machines located at nodemachine.org are completely open source and MIT licensed.  Third, machines are packaged up in something called a machinepack that can be required just like any other node module from npm.  So, I&rsquo;ll show you how to create node-machines in future screencasts, for now, we&rsquo;ll be consumers of a couple of them.</p>

<p>I know I want to encrypt passwords so let&rsquo;s browse the existing machinepacks.  So here&rsquo;s one called passwords.  And there&rsquo;s a machine called encryptPassword that looks kind of interesting.  With machines you know exactly what inputs you can use and exactly what you&rsquo;ll get out from the exits.  I&rsquo;m just going to copy the example usage here and paste it into my signup action.  I&rsquo;ll also move my existing response to the success exit of the machine.</p>

<p>I&rsquo;m also going to move our response into the success exit.  Finally, I&rsquo;ll grab the password as an input to the machine from a request parameter and if there&rsquo;s an error I&rsquo;ll let Sails handle it with res,negotiate and respond with the error.  I&rsquo;m also going to change the default result arguent to a more meaningful name like encrypted password.</p>

<p>So in addition to encrypting the password I want to create a gravatar url from the email address that we get from our user.  Let&rsquo;s go back to node-machine.org and browse to the gravatar machinepack.  The getImageUrl machine returns a URL of a gravatar based upon an inputted email address.   This machine actually has two ways we can set it up.  The example usage is using `execSync()<code>, which allows me to use the machine sychronously.  I want to use the machine asynchronously so I'll use</code>.exec()&#8220;.  Therefore, I&rsquo;ll also provide both success and error handlers.</p>

<p>So we&rsquo;ve encrypted our passwords and generated a gravatar URL.  Next we&rsquo;ll save these attributes along with the other fields in our signup form using the create method of our user model.  I&rsquo;ve also added an attribute lastLoggedIn and assigned it the value of the date method.  If we get an error I&rsquo;ll let Sails handle it with res,negotiate and respond with the error.  Otherwise I&rsquo;ll return a response with the id of the new user record as json.</p>

<p>We need to install the two machines we&rsquo;re using.  Open up the terminal window and type npm install machinepack-passwords -save.  Next, we&rsquo;ll install the gravatar machinepack by typing <code>npm install machinepack-gravatar -save</code>.</p>

<p>Okay, let&rsquo;s make sure all of this works.  Restart Sails using sails lift.  Again we&rsquo;re going to get this message about migration.  Our choices are:  Safe, Drop, and Alter</p>

<p>If I set migrations to <code>safe</code>,  sails doesn&rsquo;t do anything other than create a connection to the database and run queries. It&rsquo;s the default environment for production and should be used whenever you are working with data you don&rsquo;t want to risk losing.</p>

<p>Instead of trying to migrate the data in the database this mode drops the database and creates brand new tables, essentially giving you a fresh start.  If you have a bootstrap file that resets your data on every lift then the drop migration is a good way to get going when your models are constantly changing in the beginning of a project.</p>

<p><code>alter</code> is next step up from <code>drop</code>.  The difference is that before it drops the database it tries to store all the records in memory and when the table has been re-created it attempts to re-insert them into the new data structure. It&rsquo;s useful if you have a very small data set and are making trivial changes to the data schema.  We&rsquo;ll ultimately be using safe mode but for now we&rsquo;ll use alter.  We can set this mode by going into the config/models.js file and uncommenting this line.</p>

<p>So let&rsquo;s lift sails using sails lift.  Navigate your browser to <code>localhost:1337/signup</code>.  I&rsquo;ll add another one of my heros Neil Armstrong.  And as you can see we have a new record with an encrypted password, a gravatar URL and our lastLoggedIn Attribute.</p>

<p>So far we&rsquo;ve been using our user model without any attributes.  And that&rsquo;s fine, especially for nosql databases.  In this current project, we&rsquo;re using Sails local disk database that has characteristics of a no-sql database.  We&rsquo;ll be swapping it out for mongo in an upcoming episode.  At this point, I want to prevent duplicate users and I also want to prevent the storage of fields other than those I define in my model.  This is just a double check because we&rsquo;re specifying the fields we want to create in our controller action.  So we&rsquo;re currently in the user model via the /models/User.js file.  I&rsquo;m going to add some attributes here.  We&rsquo;re already doing a bunch of validation client side, but since those are not necessarily secure, we&rsquo;ll reinforce the validation on the back-end.  I&rsquo;ll use the required attribute on some of the fields and the unique attribute on the email field.  This will prevent duplicate email addresses from being saved.</p>

<p>So let&rsquo;s go back to our signup action in the user controller.  First I want to parse the error I get back from Sails regarding the duplicate email address.  Let&rsquo;s log the error and take a look at what we get back.  So in POSTMAN with Sails lifted.  I&rsquo;ll create the Nikola Tesla record.  Now when I try to add Tesla again, I get the unique error.  So let&rsquo;s go back into the action and handle that error.  This also let&rsquo;s me introduce you to custom responses.  So if an error exists and it has to do with the email attribute, and the rule that&rsquo;s being violated is the unique attribute, then I want to respond with this emailAddressInUse function.  I&rsquo;m going to place that function as a custom response in the responses folder.  Let&rsquo;s go ahead and take a look that resonse.  So, I&rsquo;ll get access to the response and then return a more easily parsable object back to the client.  So let&rsquo;s re-lift  Sails and in POSTMAN try to add Mr. Tesla again and we get our error object.</p>

<p>Let&rsquo;s provide for a better user experience to this error on the front end.  First we&rsquo;ll go into the SignUp Module and inject the toastr service we started in the last episode.  This will provide us with some great looking messages.  Next, we&rsquo;ll do something similar in the SignupController injecting the toastr service into our controller.  So now we need handle the duplicate error response from Sails passing an error message to the user.  In the last episode we already set this up in the markup of our signup page.  So start Sails and navigate your browser to <code>localhost:1337/signup</code>.  I&rsquo;ll attempt to create Nikola Tesla one more time.  And there&rsquo;s our duplicate user error message, however, the loading state hasn&rsquo;t changed as evidenced by the animated Create Account button.  Okay the reason for this is something most refer to as old age.  But the good news it&rsquo;s an easy fix. So, head back to SignupController and change signupForm.location: false to  signupForm.loading: false which is what actually was intended but for you know what.  Just to show you it&rsquo;s fixed I&rsquo;ll add Nikola again for the last time.  And we get both the message and the button with the correct loading state.</p>

<p>Alright, in the next episode we&rsquo;ll add our login state through a request to /login, our profile page, and a database switch to mongodb.  Thanks as always for watching and be sure to follow me on twitter and signup for the Sailscasts mailing list.  Also go checkout and signup for the beta of the Sails team&rsquo;s latest creation Treeline.io.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building an Angular Application in Sails: Ep4 - Implementing requests in Angular to a Sails API.]]></title>
    <link href="http://irlnathan.github.io/sailscasts/blog/2015/03/06/building-an-angular-application-in-sails-ep4-implementing-requests-in-angular-to-a-sails-api/"/>
    <updated>2015-03-06T17:03:00-06:00</updated>
    <id>http://irlnathan.github.io/sailscasts/blog/2015/03/06/building-an-angular-application-in-sails-ep4-implementing-requests-in-angular-to-a-sails-api</id>
    <content type="html"><![CDATA[<iframe width="640" height="390" src="http://www.youtube.com/embed/eOZ7n-5uASo" frameborder="0" allowfullscreen></iframe>


<p>Follow me on twitter <a href="https://twitter.com/irlnathan">here</a>.</p>

<p>Subscribe to the sailscasts mailing list <a href="http://irlnathan.github.io/sailscastsnewsletter/">here</a>.</p>

<p>The repo for this episode can be found <a href="https://github.com/irlnathan/activityoverlord20">here</a>.</p>

<h1>Transcript</h1>

<p>Howdy from Austin and welcome back.</p>

<p>It&rsquo;s now time to get into implementing our Sails back-end api for the signup page.  In terms of workflow, we&rsquo;re going to let the signup page drive the requirements of our Sails <em>back-end</em>.  So looking at the signup page I want to find all of the places where the frontend needs to make requests of our backend.</p>

<p>Not to get too nerdy here, but really we&rsquo;ve already made a <code>request</code> from our browser to our Sails back-end when we loaded the signup page.  When I navigated to <code>localhost:1337/signup</code> with the browser, the Sails web server passed our request to the router, which parsed the request, in this case, /signup and matched it with a handler in the routes.js file ultimately responding with this view.  So now that we have the signup page rendered in our browser, what other elements in the page need to make requests?</p>

<p>There are at least three different elements that will make requests to the Sails back end api.  They include <code>/</code> when the user clicks the activityOverlord2.0 logo, to <code>/login</code> when the user clicks the Sign In button, and to <code>/signup</code> when the user clicks the Create Account button.  I&rsquo;m going to implement the request to <code>/signup</code> first.  Now, some of you might be wondering, wait, we&rsquo;ve already handled a request to <code>/signup</code>.  And that&rsquo;s true but it&rsquo;s to GET /signup, where GET is the HTTP verb that the browser tpically uses to request web pages.  This new request, however, will use the HTTP verb POST as in POST <code>/signup</code>.  If this is starting to make your head spin, get your balance and head over to this episode which explains HTTP routing in nauseating detail.  Actually I, I hope it isn&rsquo;t nauseating.</p>

<p>Ok,  this POST <code>/signup</code> request will take the gathered contents of this form and send it to the Sails server via an AJAX request from Angular.</p>

<p>So let&rsquo;s set this up and go b  ack in our text editor, wait where&rsquo;s sublime.  I love sublime text but I wanted to experiment with the Atom editor from github for the next serveral episodes&hellip;.anyway we&rsquo;re in signup.ejs.  And we need to implement this function that the ng-submit directive is pointing to: `submitSignupForm()&#8220;.  But where do we declare that function?  We&rsquo;ll declare it in our controller which we pointed to via the ng-controller directive here.  The actual controller code is contained in a file named SignupController.js by convention because really we could&rsquo;ve named the fie foo.  So here&rsquo;s where we actually created the controller.  So I&rsquo;ll declare the function here.  But this function has no connection or binding to the markup.  We&rsquo;ll use the Angular $scope object to make this connection.  Angular characterizes the $scope object as the glue between the controller and directives in the markup.  So on the onehand we have controllers contained in javascript files and on the other we have directives contained in mark-up.  And the $scope object is used as the bridge between them.</p>

<p>So let&rsquo;s fire up sails using Sails lift and go into the chrome browser and navigate to <code>localhost:1337/signup</code>.  And as you can see here we&rsquo;ve got an error&hellip;our $scope object has not defined.  What&rsquo;s happened is the $scope has not been injected into our function.  But we can easily remedy that by passing the scope as an argument into the function.  Now when we refresh the browser, we no longer have an issue.  But we&rsquo;re not out of the woods yet.</p>

<p>Angular determines a controller&rsquo;s dependencies from the arguments to the controller&rsquo;s constructor function.  So if we minify our JavaScript for the Signup controller, all of the function arguments including $scope would be minified as well.  So $scope could turn into the letter a and Angular&rsquo;s dependency injector would not be able to identify services correctly.  But there&rsquo;s an easy fix here.  I can add an array to the constructor here that adds a string for $scope and since strings aren&rsquo;t minified, Angular has a way to match the name with the argument.  Let&rsquo;s go back into browser and refresh and make sure everything works.</p>

<p>Okay great, Next, we&rsquo;ll enable the loading states we created in the previous episode.  I&rsquo;ll set-up the initial loading state by adding  another attribute to the scope object:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// set-up loading state</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">signupForm</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">loading</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, don&rsquo;t be confused by my adding the <code>signupForm</code> attribute between the scope object and the loading attribute.  I&rsquo;m just gonna namespace everything concerning the signup form to under this attribute.  So when our submitSignupForm() function is executed we want the loading state to change to true. If we look at the markup and specifically the create account button, you can see what&rsquo;s changing based upon the loading state.  If the loading state is false, the button will display the Create Account text.  If it&rsquo;s true, the button will display our spinner animation with the text Preparing your new account within the button.  Okay, let&rsquo;s see if this works.  I&rsquo;ll go back to the signup page and since we have validation I need to put in some valid values and when I click the create account button you can see the loading state change.</p>

<p>So now let&rsquo;s add the ajax request to our function and we&rsquo;re going to do that with an Angular service $http. If you&rsquo;ve ever done an ajax request in jquery, this is going to look very familiar.  First, let&rsquo;s inject it into the function and the array like we did with the $scope object.  So we&rsquo;re going to put in the path and any data we want to send with the request.  In order to bind the form fields to these data attributes we&rsquo;re going to use $scope again.  And remember the $scope is linking the values that we&rsquo;re capturing in the mark-up via the ng-model directive.  So let&rsquo;s do that for the rest of our fields in the form.  We&rsquo;ve got title, and email, and password.  Okay great, now let&rsquo;s declare our success and error handlers.  So on success I want to change the location of the browser to <code>/user</code>.  This has the effect of making a <code>GET</code> request to <code>/user</code>.  If the request generates an error, I want to catch that error and for now just log the response.  Finally, I&rsquo;ll create this catchall function and either way I want to reset the loading state back to false.</p>

<p>We&rsquo;re now going to transition from the front-end to the back-end.  From the angular framework to the Sails framework.  Our goal is to create  a user by gathering up account information and sending it to Sails.  So let&rsquo;s implement some stuff and then I&rsquo;ll circle back and explain what we did in more detail.</p>

<p>Head over to the terminal and type sails generate api user.  With this simple set of commands and a bunch of tools and automation from Sails, we have almost everything we need for our API.  Start the Sails server by typing sails lift.</p>

<p>Because we created a model, Sails is asking us a question about migrations, we&rsquo;ll come back to this.  For now I&rsquo;m going to use the second option &mdash; <code>alter</code>.</p>

<p>Next, let&rsquo;s go into the browser and navigate to <code>localhost:1337/user</code>.  We&rsquo;ve just used one of Sails blueprint shortcut actions.  By navigating to &lsquo;/user&rsquo; we made a <code>GET</code> request to the server for all the user records.  And since we haven&rsquo;t created any records yet, not suprisingly we get an empty array.  But using the create action blueprint shortcut I&rsquo;ll create our first user record &mdash; Humphrey Bogart.  Sails also has blueprint rest or RESTful actions.  From within POSTMAN, really one of the best tool on the planet for testing routes, I&rsquo;ll make a POST request to /user with these route parameters for our next user Aimee Mann.   Chances are you&rsquo;ll create your own Controller Actions by the time you get to production.  However, Blueprints are incredibly useful in the design phase of your API.  If you interested in learning more about Blueprint capabilities, head over to this episode where I break them down in a bunch of detail.</p>

<p>So the path we want to associate with create a user is <code>/signup</code>.  So head back into the editor and open up <code>\config\routes.js</code>.  I&rsquo;m going to add the route <code>POST /signup</code> which will be handled by the <code>UserController.create</code> action. Let&rsquo;s restart Sails and navigate to the signup page.  Finally, I&rsquo;ll signup my hero Nikola Tesla.  And there&rsquo;s our list of records.</p>

<p>So briefly I want to go over what we&rsquo;ve done.  We created a route that connects the request to a controller and action. When the api was created, Sails provided us with a user controller and a create action (via blueprints) automatically.  Sails also created a user model that has model methods like .create, .find, .update, and .destroy.  Finally, the user model can retrieve and save records from a variety of databases via adapters.</p>

<p>In the next episode we&rsquo;ll transition from Sails blueprints to our custom action.  I&rsquo;ll also introduce a brand new Sails concept &mdash; node machines.  Thanks as always for watching and be sure to follow me on twitter and signup for the Sailscasts mailing list.  Also go checkout and signup for the beta of the Sails team&rsquo;s latest creation Treeline.io.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building an Angular Application in Sails: Ep3 - Understanding Asset Delivery Options in our SignUp Page.]]></title>
    <link href="http://irlnathan.github.io/sailscasts/blog/2015/01/20/building-an-angular-application-in-sails-ep3-understanding-asset-delivery-options-in-our-signup-page/"/>
    <updated>2015-01-20T16:12:00-06:00</updated>
    <id>http://irlnathan.github.io/sailscasts/blog/2015/01/20/building-an-angular-application-in-sails-ep3-understanding-asset-delivery-options-in-our-signup-page</id>
    <content type="html"><![CDATA[<iframe width="640" height="390" src="http://www.youtube.com/embed/4keciyLVPiM" frameborder="0" allowfullscreen></iframe>


<p>Follow me on twitter <a href="https://twitter.com/irlnathan">here</a>.</p>

<p>Subscribe to the sailscasts mailing list <a href="http://irlnathan.github.io/sailscastsnewsletter/">here</a>.</p>

<p>The repo for this episode can be found <a href="https://github.com/irlnathan/activityoverlord20">here</a>.</p>

<h1>Transcript</h1>

<p>In activityOverlord v1.0 the user interface or <code>Views</code> of the app were built primarily on the server before being sent to the client and rendered by the client&rsquo;s browser.  This approach is the <code>V</code> of the <strong>MVC architecture</strong> and also known as <strong>Server Rendering</strong> even though the web page is actually being rendered on the client&rsquo;s browser.</p>

<p>This so called <em>Server Rendering</em> is the server preprocessing one or more templates of markup, usually some combination of HTML, CSS, and Javascript and combining them with data via a <strong>Template Engine</strong>.  All <em>template engines</em> use some form of tags that surround variables that when processed yield a result.  Sails uses the EJS template engine by default.  For example, this template contains some standard HTML mark-up along with <code>EJS</code> tags.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!DOCTYPE html&gt;
</span><span class='line'>&lt;html&gt;
</span><span class='line'>  &lt;head&gt;
</span><span class='line'>    &lt;title&gt;&lt;%- title %&gt;&lt;/title&gt;
</span><span class='line'>  &lt;/head&gt;
</span><span class='line'>  ...
</span></code></pre></td></tr></table></div></figure>


<p>Between the tags is a variable <code>title</code>.  When the Sails server processes this template it will attempt to replace the <code>title</code> variable with a value, hopefully the page title.  This is also called <strong>String Interpolation</strong>, but I only mention that because I&rsquo;m a geek.</p>

<h3>Server Rendered Views</h3>

<p>So let&rsquo;s review this approach. When a client browser makes a <code>request</code> to the server, the <code>router</code> parses the <code>request</code> and determines where to send it.  Now, the resulting <code>route</code> typically points to a <code>controller/action</code> that might execute some logic. For example, that logic might include accessing a mongo database that retrieves a stored twitter id and access token.  The id and token are then used to request additional details of the user from the Twitter API, all before the server pre-processes a template which contains tags with variables that are replaced by the Twitter details into a <code>View</code>.  The <code>View</code> is then sent back to the client and ultimately rendered by the browser.</p>

<p>Now, this traditional approach to web applications has at least two weaknesses.  First, its reliance on the server for page creation means the responsiveness of the app is impeded by the constant round trips necessary to update changes to the <code>View</code> from the server.  Second, is that the API being tightly coupled to the <code>View</code> makes it less flexible for other potential consumers to use.</p>

<p>A more modern approach to web applications solves both weaknesses by pushing the responsibility for changing the UI to the client as well as decoupling the API to act as an independent provider of endpoints.  These endpoints can then be accessed by the browser UI, a native app UI, a mobile UI, or even a smart refrigerator UI.</p>

<p>Now this doesn&rsquo;t mean that we&rsquo;ll be abandoning Server Rendered Views entirely.  Instead activityOverlordv2.0 will take a hybrid approach using a blend of Server Rendered Views combined with Front-end Framework Components to deliver a UI that makes authentication and SEO manageable.  But as usual I&rsquo;m getting ahead of myself.</p>

<p>So let&rsquo;s go back to the project and see what Server Rendered Views look like in action.  By default, Sails generated  three files &mdash; <code>homepage.ejs</code>, <code>layout.ejs</code>, and a route to the homepage contained in <code>/config/route.js</code>.  So when I make a request in the browser to localhost:1337, the Sails router looks at the request and matches it with the <code>route</code> in the routes file (e.g. <code>route.js</code>).  This triggers the <em>View Engine</em> to pre-process <code>layout.ejs</code> with <code>homepage.ejs</code> to produce the View that&rsquo;s being rendered by my browser.  The <code>Layout.ejs</code> file is actually a wrapper around <code>homepage.ejs</code>.  And what I mean by that is if we look at both files you can see that <code>layout.ejs</code> contains typical mark-up that we want for every page, things like DOCTYPE, html, and head tags.  So we have EJS tags here with a <code>body</code> variable which when processed by the Sails View Engine is replaced with the contents of <code>homepage.ejs</code> .  The result is our View.</p>

<p>Despite it&rsquo;s power, and to make this example crystal clear, I&rsquo;m going to disable the layout functionality in Views at least for the time being.  To do this I&rsquo;ll go into into /config/views.js and change the <code>layout</code> parameter from <code>layout</code> to false.</p>

<p>The first part of activityOverlord v2.0 consists of the <strong>Signup Page</strong> and when completed will look something like this.  Let&rsquo;s get started.  I&rsquo;ll first create a new file named <code>startup.ejs</code> and I&rsquo;ll put a simple header in it <code>&lt;h1&gt; Signup Page&lt;/h1&gt;</code>.  Next, I&rsquo;ll remove the existing <code>route</code> to the <code>homepage</code> and replace it with a <code>route</code> to the new <code>The Signup Page</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s1">&#39;GET /signup&#39;</span><span class="o">:</span> <span class="p">{</span><span class="nx">view</span><span class="o">:</span> <span class="s1">&#39;signup&#39;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s take a look.  I&rsquo;ll start Sails using <code>sails lift</code> and then navigate my browser to <code>localhost:1337/signup</code>.  Okay good, here&rsquo;s our signup page.</p>

<p>Let&rsquo;s go back to the <code>Signup Page</code> and I&rsquo;ll start by copying in some boilerplate <code>html</code>.  Next, I&rsquo;ll add our first <strong>Angular</strong> <code>directives</code> into the body tag &mdash; <code>ng-app</code>, <code>ng-controller</code>, and <code>ng-cloak</code>. Let&rsquo;s refresh the browser and see what happens.  Well nothing happens, because we haven&rsquo;t yet added Angular yet.  We could manually add the script tags that reference  Angular, however, Sails can do this automatically for us using it&rsquo;s own tagging system (e.g. <code>&lt;!--SCRIPTS--&gt;</code> <em>tag</em>).  You know what, it&rsquo;s easier just to show you.  So I&rsquo;ll add the <em>tags</em> to <code>signup.ejs</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;!</span><span class="nx">DOCTYPE</span> <span class="nx">html</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">html</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">head</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">title</span><span class="o">&gt;</span><span class="nx">Sign</span> <span class="nx">Up</span> <span class="k">for</span> <span class="nx">Activity</span> <span class="nx">Overlord</span> <span class="p">(</span><span class="nx">angular</span><span class="p">)</span><span class="o">&lt;</span><span class="err">/title&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!--</span> <span class="nx">Viewport</span> <span class="nx">mobile</span> <span class="nx">tag</span> <span class="k">for</span> <span class="nx">sensible</span> <span class="nx">mobile</span> <span class="nx">support</span> <span class="o">--&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">meta</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;viewport&quot;</span> <span class="nx">content</span><span class="o">=</span><span class="s2">&quot;width=device-width, initial-scale=1, maximum-scale=1&quot;</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/head&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">body</span> <span class="nx">ng</span><span class="o">-</span><span class="nx">app</span><span class="o">=</span><span class="s2">&quot;SignupModule&quot;</span> <span class="nx">ng</span><span class="o">-</span><span class="nx">controller</span><span class="o">=</span><span class="s2">&quot;SignupController&quot;</span> <span class="nx">ng</span><span class="o">-</span><span class="nx">cloak</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">The</span> <span class="nx">Signup</span> <span class="nx">Page</span>
</span><span class='line'>    <span class="c">&lt;!--</span><span class="nx">SCRIPTS</span><span class="o">--&gt;</span>
</span><span class='line'>    <span class="c">&lt;!--</span><span class="nx">SCRIPTS</span> <span class="nx">END</span><span class="o">--&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/body&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;ll restart the Sails server using <code>Sails lift</code> and then go back into the browser but also open up the browser console&hellip;okay let&rsquo;s refresh the page and see what happens.  Okay, that new, we get this console message that we&rsquo;re &ldquo;connected to Sails&rdquo;, but where did that come from?  If we look at the page source we&rsquo;ll get a clue.  Towards the bottom of the page a link to a file named<code>sails.io.js</code> has been added to our signup page (e.g. <code>signup.ejs</code>).  But where did that link come from?   Let&rsquo;s go into our project in Sublime and navigate to <code>assets/js</code>.  In the dependencies foler there&rsquo;s our sails.io.js file.  First, this file deals with <code>web sockets</code> and <code>socket.io</code>, which we&rsquo;ll be covering in later episodes.  The big question now is, how did a link to that file get inserted into <code>signup.ejs</code>?  The short answer is that <strong>Grunt</strong> did it for us.  Okay, so what&rsquo;s <code>Grunt</code>?</p>

<p><code>Grunt</code> calls itself a <em>JavaScript Task Runner</em> but really <code>Grunt</code> is all about automation.  It allows you to create repetive tasks that can be executed automatically.  For example, there&rsquo;s a Grunt task that&rsquo;s looking for changes in the Sails assets folder.  Sails creates a .tmp folder in the root of our project.  As we can see here any files in the assets folder are copied into .tmp/public which acts like a static file folder you&rsquo;d find on any web server.  But what about the link to sails.io.js?  This is yet another Grunt Task that will place a link to any javascript file found in assets/js that has the corresponding Script tags we just placed in signup.ejs (e.g. <code>&lt;!--SCRIPTS--&gt;&lt;!--SCRIPTS END--&gt;</code>).</p>

<p>Of course all of these tasks are happening automatically without us having to be aware of them.  However, for those of you who want a little more detail behind the magic,  I created a doc that goes into much more specifics of the Grunt/Sails integration than I do in this screencast.  The documentation can be found <a href="https://github.com/irlnathan/s-grunt-docs/blob/master/overview.md">here</a>.</p>

<p>So let&rsquo;s go ahead and place the main Angular file in the <code>assets/js/dependencies</code> folder and I&rsquo;ll refresh the browser.  Looking at the page source we can see that a link to angular has been automatically placed in our signup page.  But when I refreshed the browser, Angular is mad at us because we have some directives in the signup page without any associated javascript files.  But not to worry, we can easily fix that.  Let&rsquo;s navigate back to the <code>assets/js</code> folder in Sublime and we&rsquo;ll create a folder called <code>public</code>.  We&rsquo;ll put all of our Angular files that have to do with those parts of the application that don&rsquo;t require authentication.  Within <code>public</code> we&rsquo;ll create a folder called <code>signup</code>.  And within <code>signup</code> we&rsquo;ll create two files SignupModule.js<code>and</code>SignupController.js<code>.  Okay, first let's take a look at</code>SignupModule.js` and  I&rsquo;ll add the bare bones Angular code to define our new module.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;SignupModule&#39;</span><span class="p">,</span> <span class="p">[]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, I&rsquo;ll open <code>SignupController.js</code> and add the bare bones Angular code to define our new controller.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;SignupModule&#39;</span><span class="p">).</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;SignupController&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s go back to the browser and refresh the page.  As you can see, we still have an Angular issue.  If we look at the page source, we can see what the issue is, <code>SignupController</code> is getting loaded before <code>SignupModule</code>.  This is easy to fix and touches on another aspect of <strong>Grunt</strong>.  Most of the configuration for Grunt can be found within the <code>activityOverlord20/tasks</code> folder.  For this issue we&rsquo;re going to look in the root of the <code>tasks</code> folder for a file named <code>pipeline.js</code>.  This file contains the configuration for how the SCRIPTS tags are used (e.g. <code>&lt;!--SCRIPTS--&gt;</code>)  as well as some other tags we&rsquo;ll be using shortly.</p>

<p>Next, I&rsquo;ll open <code>pipeline.js</code> in Sublime.  We want to load the <code>SignupModule</code> after dependencies but before any other javascript files.  So we&rsquo;ll put the path to our file here.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Dependencies like jQuery, or Angular are brought in here</span>
</span><span class='line'>  <span class="s1">&#39;js/dependencies/**/*.js&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// All of the rest of your client-side js files</span>
</span><span class='line'>  <span class="c1">// will be injected here in no particular order.</span>
</span><span class='line'>  <span class="s1">&#39;js/public/signup/SignupModule.js&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;js/**/*.js&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now when I refresh the browser, Angular no longer complains and if look back at the page source we can see that SignUpModule is being loaded before SignupController.</p>

<p>So let&rsquo;s go back to signup.ejs in Sublime and insert the remainder of the markup for our Signup Page.   Let&rsquo;s start-up Sails using <code>Sails lift</code> and navigate the browser to localhost:1337/signup.  Although the page loads without errors, there&rsquo;s some obvious dependencies that need to be added in order for this page to look right.  First I&rsquo;ll add Bootstrap (e.g. <code>bootstrap.css</code>) to the <code>/assets/sytles</code> folder.  Similar to what we did with javascript files in the previous episode, Sails will automatically include links to the CSS in <code>signup.ejs</code>.  Taking a look at <code>signup.ejs</code> we can see the Styles tags that were added when I brought in the earlier mark-up as well as a link Grunt automatically created to the bootstrap file I just added.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>...
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!--SCRIPTS--&gt;</span>
</span><span class='line'>    <span class="c">&lt;!--SCRIPTS END--&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, I&rsquo;m going to create a <code>fonts</code> folder and add some fonts we&rsquo;ll be using later in the interface.</p>

<p>I&rsquo;m also going to add some <code>.less</code> files into the <code>assets/styles</code> folder that we&rsquo;ll being using later in the interface as well.</p>

<p>You may have noticed the <code>importer.less</code> file which let&rsquo;s us control which less files are included the Styles Tag as well as their order.  Note that the Grunt task included in Sails will only compile the <code>.less</code> files that are referenced in this file.</p>

<p>I&rsquo;m also be adding Jesús Rodríguez&rsquo;s <a href="https://github.com/Foxandxss">https://github.com/Foxandxss</a> fantastic angular messaging library Angular-toastr.  The library contains both a javascript and a css file.</p>

<p>Finally, I&rsquo;ll add the <code>CompareTo</code> Angular Directive which will help us with comparing the value of form fields.  I&rsquo;ll place it in the <code>/js/dependencies</code> folder.</p>

<p>So let&rsquo;s see where we are after these dependencies were added.  I&rsquo;ll head back to the browser refresh the page.  The console displays an <code>Uncaught reference error that Angular is not defined.</code>  Since this is coming from the <code>toastr</code> library my hunch is that we have a loading order error. And sure enough if we look at the page source, the <code>toaster</code> library is being loaded before Angular.   I&rsquo;ll head back to our project and <code>pipeline.js</code> in sublime and add a reference to Angular here (e.g. <code>'js/dependencies/angular.1.3.js',</code>) that will load Angular first before any of the other depedencies.</p>

<p>Let&rsquo;s head back to the browser and refresh the page.   Great, there&rsquo;s no longer and error.</p>

<p>Now let&rsquo;s take a look at some form validation in signup.ejs.  There are three components to the form field validation we&rsquo;re going to perform.  So taking a look at the name field.  We first use the ng-class directive to create the <code>has-error</code> class if the field name is invalid and dirty.  This will insert a red border around the input field.  Next we&rsquo;ll configure the validation parameters of the field itself.  In this case we&rsquo;re requiring that the field have a value as well as have a maxlength of 50 characters.  Finally, we&rsquo;ll set-up the text for our error message here.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- Also, if signup.name.$dirty is true, show the message depending upon the particular properties truthiness (e.g. required</span>
</span><span class='line'><span class="c">and/or maxlength) --&gt;</span>
</span><span class='line'><span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;help-block has-error&quot;</span> <span class="na">ng-if=</span><span class="s">&quot;signup.name.$dirty&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;span</span> <span class="na">ng-show=</span><span class="s">&quot;signup.name.$error.required&quot;</span><span class="nt">&gt;</span>Name is required.<span class="nt">&lt;/span&gt;</span>
</span><span class='line'>  <span class="nt">&lt;span</span> <span class="na">ng-show=</span><span class="s">&quot;signup.name.$error.maxlength&quot;</span><span class="nt">&gt;</span>The name cannot be more than 50 characters.<span class="nt">&lt;/span&gt;</span>
</span><span class='line'><span class="nt">&lt;/span&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s see this in action.  I&rsquo;ll go back to the browser and type in a name.  Now If I remove the name, the required validation is triggered and if I add to many character&rsquo;s the maxlength validation will be triggered.</p>

<p>Let&rsquo;s go back to signup.ejs and review the remaining form fields configuration.</p>

<p>So the Title field&rsquo;s configuration is identical to the name, the title is required and has a max length of 50 characters.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- T I T L E --&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;control-group form-group col-md-12&quot;</span>
</span><span class='line'>  <span class="na">ng-class=</span><span class="s">&quot;{&#39;has-error&#39;:signup.title.$invalid &amp;&amp;</span>
</span><span class='line'><span class="s">                        signup.title.$dirty}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;label&gt;</span>Your title<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">class=</span><span class="s">&quot;form-control&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;e.g. Genius&quot;</span> <span class="na">name=</span><span class="s">&quot;title&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;signupForm.title&quot;</span> <span class="na">ng-maxlength=</span><span class="s">&quot;50&quot;</span> <span class="na">required</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;help-block has-error&quot;</span> <span class="na">ng-if=</span><span class="s">&quot;signup.title.$dirty&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;span</span> <span class="na">ng-show=</span><span class="s">&quot;signup.title.$error.required&quot;</span><span class="nt">&gt;</span>Title is required.<span class="nt">&lt;/span&gt;</span>
</span><span class='line'>    <span class="nt">&lt;span</span> <span class="na">ng-show=</span><span class="s">&quot;signup.title.$error.maxlength&quot;</span><span class="nt">&gt;</span>The name cannot be more than 50 characters.<span class="nt">&lt;/span&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/span&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The Email field is required and requires a properly formatted email address.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- E M A I L --&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;control-group form-group col-md-12&quot;</span>
</span><span class='line'><span class="na">ng-class=</span><span class="s">&quot;{&#39;has-error&#39;:signup.email.$invalid &amp;&amp;</span>
</span><span class='line'><span class="s">                      signup.email.$dirty}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;label&gt;</span>Your email address<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;email&quot;</span> <span class="na">class=</span><span class="s">&quot;form-control&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;nikola@tesla.com&quot;</span> <span class="na">name=</span><span class="s">&quot;email&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;signupForm.email&quot;</span> <span class="na">required</span> <span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;help-block has-error&quot;</span> <span class="na">ng-if=</span><span class="s">&quot;signup.email.$dirty&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;span</span> <span class="na">ng-show=</span><span class="s">&quot;signup.email.$error.required&quot;</span><span class="nt">&gt;</span>Email address is required.<span class="nt">&lt;/span&gt;</span>
</span><span class='line'>    <span class="nt">&lt;span</span> <span class="na">ng-show=</span><span class="s">&quot;signup.email.$error.email&quot;</span><span class="nt">&gt;</span>Not a valid email address.<span class="nt">&lt;/span&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/span&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The Password field is required and must be at least 6 characters.  Also notice that we&rsquo;re using the CompareTo directive to compare the password field with the confirmPassword model.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- P A S S W O R D --&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;control-group form-group col-md-6&quot;</span>
</span><span class='line'><span class="na">ng-class=</span><span class="s">&quot;{&#39;has-error&#39;:signup.password.$invalid &amp;&amp;</span>
</span><span class='line'><span class="s">                      signup.password.$dirty}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;label&gt;</span>Choose a password<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>  <span class="c">&lt;!-- Added the compareTo directive that compares the passowrds --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;password&quot;</span> <span class="na">class=</span><span class="s">&quot;form-control&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;at least 6 characters&quot;</span> <span class="na">name=</span><span class="s">&quot;password&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;signupForm.password&quot;</span> <span class="na">id=</span><span class="s">&quot;password&quot;</span> <span class="na">required</span> <span class="na">ng-minlength=</span><span class="s">&quot;6&quot;</span> <span class="na">compare-to=</span><span class="s">&quot;signupForm.confirmPassword&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;help-block has-error&quot;</span> <span class="na">ng-if=</span><span class="s">&quot;signup.password.$dirty&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;span</span> <span class="na">ng-show=</span><span class="s">&quot;signup.password.$error.required&quot;</span><span class="nt">&gt;</span>Password is required.<span class="nt">&lt;/span&gt;</span>
</span><span class='line'>    <span class="nt">&lt;span</span> <span class="na">ng-show=</span><span class="s">&quot;signup.password.$error.minlength&quot;</span><span class="nt">&gt;</span>Password must be at least 6 characters.<span class="nt">&lt;/span&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/span&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The Password Confirmation field is required and must match the Password Field.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- C O N F I R M  P A S S W O R D --&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;control-group form-group col-md-6&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;label&gt;</span>Re-enter your password<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;password&quot;</span> <span class="na">class=</span><span class="s">&quot;form-control&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;one more time&quot;</span> <span class="na">name=</span><span class="s">&quot;confirmation&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;signupForm.confirmPassword&quot;</span> <span class="na">required</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;help-block has-error&quot;</span> <span class="na">ng-if=</span><span class="s">&quot;signup.confirmation.$dirty&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;span</span> <span class="na">ng-show=</span><span class="s">&quot;signup.password.$error.compareTo&quot;</span><span class="nt">&gt;</span>Password must match.<span class="nt">&lt;/span&gt;</span>
</span><span class='line'>    <span class="nt">&lt;span</span> <span class="na">ng-show=</span><span class="s">&quot;signup.confirmation.$error.required&quot;</span><span class="nt">&gt;</span>Confirmation password is required.<span class="nt">&lt;/span&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/span&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, we disable the form submission button via the <code>ng-diabled</code> directive until all of the form fields have valid values.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- C O N F I R M  P A S S W O R D --&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&lt;!-- Disable signup button until the form has no errors --&gt;</span>
</span><span class='line'><span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">&quot;btn btn-primary btn-lg btn-block&quot;</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">ng-disabled=</span><span class="s">&quot;signup.$invalid&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;span</span> <span class="na">ng-show=</span><span class="s">&quot;!signupForm.loading&quot;</span><span class="nt">&gt;</span>Create Account<span class="nt">&lt;/span&gt;</span>
</span><span class='line'>  <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;overlord-loading-spinner fa fa-spinner&quot;</span> <span class="na">ng-show=</span><span class="s">&quot;signupForm.loading&quot;</span> <span class="nt">&gt;&lt;/span&gt;</span>
</span><span class='line'>  <span class="nt">&lt;span</span> <span class="na">ng-show=</span><span class="s">&quot;signupForm.loading&quot;</span><span class="nt">&gt;</span>Preparing your new account...<span class="nt">&lt;/span&gt;</span>
</span><span class='line'><span class="nt">&lt;/button&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Okay let&rsquo;s go back and take a look at the validations in action.  I&rsquo;m going to refresh the browser.</p>

<p>Believe it or not that rounds out our signup page.  In the next episode we&rsquo;ll start to flesh out our initial API that connects the signup page with an endpoint that creates a user account via a model into a database.</p>

<p>You can find all of the source code for this episode at the activityOverlord20 repo on github.</p>

<p>And If have a moment plese follow me on twitter and be sure to signup for the Sailscasts mailing list so I can finally prove to my wife that there are actually folks watching this stuff.  As always thanks for watching.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up the development environment and creating your first project]]></title>
    <link href="http://irlnathan.github.io/sailscasts/blog/2015/01/09/setting-up-the-development-environment-and-creating-your-the-project/"/>
    <updated>2015-01-09T18:21:00-06:00</updated>
    <id>http://irlnathan.github.io/sailscasts/blog/2015/01/09/setting-up-the-development-environment-and-creating-your-the-project</id>
    <content type="html"><![CDATA[<iframe width="640" height="390" src="http://www.youtube.com/embed/mGrKLi54Xsg" frameborder="0" allowfullscreen></iframe>


<p>Follow me on twitter <a href="https://twitter.com/irlnathan">here</a>.</p>

<p>Subscribe to the sailscasts mailing list <a href="http://irlnathan.github.io/sailscastsnewsletter/">here</a>.</p>

<h1>Transcript</h1>

<p>Howdy and welcome back.</p>

<p>As in the previous series, I&rsquo;m going to assume you already have Node installed.  If you don&rsquo;t there&rsquo;s a bunch of helpful documentation on <a href="http://nodejs.org">nodejs.org</a> and installers for both Mac OS X and Microsoft Windows can be found <a href="http://nodejs.org/download/">here</a> as well as binaries for Linux and SunOS.</p>

<p>As for as my development enviornment, I&rsquo;m using OS X v10.10.1 also known as Yosemite.  For my text editor I&rsquo;m using Sublime Text 2 which can be found <a href="http://www.sublimetext.com/2">here</a>.  There&rsquo;s also an update to the editor, version 3, which I&rsquo;m not currently using but can be found <a href="http://www.sublimetext.com/3">here</a>.  Another tool we&rsquo;ll be using is the quite awesome chrome extension, known as &ndash; POSTMAN which can be found <a href="https://chrome.google.com/webstore/detail/postman-rest-client/fdmmgilgnpjigdojojpjoooidkmcomcm?hl=en">here</a>.</p>

<p>And last but certainly not least I&rsquo;ll be using Sails v0.11.0.  Now, you may see me running some release candidates of Sails initially, however, because the release of Sails v0.11.0 is eminent, I&rsquo;m not going to bother with how to install a release candidate and these initial screencasts are really not effected by the currently published version of v0.10.5.  Okay let&rsquo;s get Sails up and running by heading over to the terminal window.</p>

<p>From the last series, I received comments from a bunch of folks who had a real aversion to the terminal window.  For those of you who are new to back-end programming, jumping into the terminal window might seem intimidating.  Let me start by saying if I can understand it, believe me you can understand it.  By the end of this series you&rsquo;ll wonder how you got through your day without multiple visits to the terminal.   For those of you on OS X you&rsquo;ll find the terminal application is somewhat hidden in <code>/Applications/Utilities/Terminal.app</code>.  One other potential point of confusion about the terminal is how it&rsquo;s referred to.  For example you&rsquo;ll hear terminal window, prompt, command-line, shell, etc.  For what it&rsquo;s worth here is my attempt at terminology superimposed on this thing I&rsquo;ll be calling the terminal.</p>

<p>With that said, let&rsquo;s jump in.</p>

<p>To install sails, you simply type <code>npm install sails -g</code>, where the -g stands for global.  Note, that because of the way ownership rights are set up on my machine, I have to use <code>sudo</code> or super duper user, actually according to wikipedia it means <code>substitute user do</code>&hellip;.something like that.  Regardless, it allows you to temporarily issue a command as a super or root user.  After that Sails will start installing, so see ya in second.</p>

<p>So, in the last series of building activity overlord some people were confused about the distinction between installing sails globally and where Sails is installed when creating a new project.  By installing Sails globally, we can have access to command-line tools from anywhere on the command-line.</p>

<p>For example, let&rsquo;s create the initial Sails project for activityOverlord v2.0.  From the terminal I&rsquo;ll type <code>sails new activityoverlord20</code>.</p>

<p>So what just happened?  Sails used the globally installed version of itself to generate all of the necessary initial structure for our application.  This includes installing a copy of Sails itself inside the root of our application.  That way, sails applications are completely self contained&hellip;there&rsquo;s no &ldquo;other software&rdquo; outside of our project that we&rsquo;re dependent upon.</p>

<p>Throughout these screencasts there will be times that I want to address specific changes that effect the previous activityoverlord screencasts with v0.11.0 of Sails.  So if you don&rsquo;t have previous experience or interest with older versions of Sails, now is the time to pick up that musical instrument or check some texts for the next few seconds.  When I created the new Sails project you may have noticed that I didn&rsquo;t use the <code>--linker</code> prarameter.  That&rsquo;s because there&rsquo;s no longer a requirement to use it.  By default, that functionality is built into every Sails project.</p>

<p>Now, let&rsquo;s go back to the terminal and move into the new project by typing <code>cd acitivtyoverlord20</code>.  Without changing any of the initial files or folders of the app I can start our newly created web server by typing <code>sails lift</code> and Sails confirms that it is indeed up and running.  Next, I&rsquo;ll open a browser at localhost:1337.  The browser is accessing the default home page Sails generated when we initially built the project.</p>

<p>It&rsquo;s important to take a moment here and realize what we&rsquo;ve just accomplished.  In just a few commands we&rsquo;ve built the initial infrastructure of a web application which includes the creation of its own web server.  We then have a browser, known as the client that is making a request for a previously generated home page through the Sails web server.  The Sails server then response with the home page to be rendered in the browser.</p>

<p>Some of you may be confused by the address <code>localhost:1337</code>.  Typically, when you browse the web you&rsquo;ll enter a domain name like <code>google.com</code>&hellip;and that name actually resolves to an some ip address which maps to some computer out on the internt.  Alright, <code>localhost</code> is default name for what is technically termed a <code>loopback address</code>.  My machine&rsquo;s <code>localhost</code> points to the address <code>127.0.0.1</code>.  What the <code>loopback address</code> allows allows us to do is bypass the outside network and address a specific web service on our local machine.  In our case that web service is the Sails server.  So when the Sails starts or lifts, by default, it&rsquo;s given a port number of <code>1337</code>.  As we&rsquo;ll see in a second we can change the <code>port number</code> if we want.  <code>Port numbers</code> are the way in which we can differentiate one web service from another.  For example, I currently have our activityoverlord20 project running on port <code>1337</code>.  I created another Sails project called <code>foo</code> that I&rsquo;m going to lift on port <code>1338</code>.  When I go into the browser and open the address <code>localhost:1338</code> the homepage that I altered comes up for the foo project.  So the combination of localhost and the port number allows us to run both the server and client on the same machine while we&rsquo;re building the project.  To get completely geeky, and show you that localhost is really an arbitrary, there&rsquo;s a file found on my mac at <code>~/etc/host</code> that specifies what &ldquo;points&rdquo; to <code>127.0.0.1</code>.   As you can see, in addition to localhost I have the name <code>yaya</code> also pointing to 127.0.0.1 and yes we can go into the browser and type yaya:1337 and our homepage comes up.</p>

<p>Okay, I think I&rsquo;ve beat that one to a pulp&hellip;but sometimes you know I just get carried away.  In the next episode we&rsquo;ll start building up the client ui of activityOverlord v2.0.  So, see ya&rsquo;ll in a bit.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Let's start a new adventure]]></title>
    <link href="http://irlnathan.github.io/sailscasts/blog/2015/01/01/lets-start-a-new-adventure/"/>
    <updated>2015-01-01T12:24:00-06:00</updated>
    <id>http://irlnathan.github.io/sailscasts/blog/2015/01/01/lets-start-a-new-adventure</id>
    <content type="html"><![CDATA[<iframe width="640" height="390" src="http://www.youtube.com/embed/EHIybLmoxfE" frameborder="0" allowfullscreen></iframe>


<p>Follow me on twitter <a href="https://twitter.com/irlnathan">here</a>.</p>

<p>Subscribe to the sailscasts mailing list <a href="http://irlnathan.github.io/sailscastsnewsletter/">here</a>.</p>

<h1>Transcript</h1>

<p>Howdy all&hellip;Happy New Year, and welcome.</p>

<p>Well for those of you who have listened to the previous activityOverlord screencasts the good news is I am armed with Keynote v6.5, which is filled with even more cheesey animations for me to abuse, the bad news is I&rsquo;m even older than I was in the last series of screencasts. Seriously though I think I can overcome that and take you on another programming journey, this time updating Activity Overlord to v2.0.  Now what&rsquo;s in v2.0? The major updates include using a bunch of new features in v0.11 of Sails as well as updating the front-end UI to use AngularJS.</p>

<p>The current plan is to get the the original activityOverlord videos up to date ASAP.  Time permitting I&rsquo;ll continue making screencasts that take deeper dives into various concepts addressed in building the app.  The videos will be hosted on youtube under the ponzicoder channel with transcripts available at the following <a href="http://irlnathan.github.io/sailscasts/">gihub page</a>.  The source code is hosted in a repo on github <a href="github.com/irlnathan/activityoverlord20">here</a>. If you like what you see and want to make an old guy happy, please follow me on twitter <a href="https://twitter.com/irlnathan">here</a> and as important subscribe to the sailscasts mailing list <a href="http://irlnathan.github.io/sailscastsnewsletter/">here</a>.</p>

<p>If you find bugs feel free to send a pull request to this github repo &mdash; <a href="http://github.com/irlnathan/activityoverlord20.">http://github.com/irlnathan/activityoverlord20.</a>  If what I just said makes absolutely no sense, I&rsquo;ll be covering git and github in future screencasts.  If you have questions, there are a variety of forums to ask them.  The Sails irc channel, Stackoverflow using the tag sailsjs, and the Sails google group are all active.</p>

<p>Needless to say I&rsquo;m really excited about this new series&hellip;and as always thanks for watching.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sailsCasts Answers: Ep8 - How do blueprint: actions and blueprint: routes work in sails?]]></title>
    <link href="http://irlnathan.github.io/sailscasts/blog/2014/01/17/sailscasts-answers-ep8-how-do-blueprint-actions-and-blueprint-routes-work-in-sails/"/>
    <updated>2014-01-17T17:43:00-06:00</updated>
    <id>http://irlnathan.github.io/sailscasts/blog/2014/01/17/sailscasts-answers-ep8-how-do-blueprint-actions-and-blueprint-routes-work-in-sails</id>
    <content type="html"><![CDATA[<iframe width="640" height="390" src="http://www.youtube.com/embed/EnKRrdTi_gk" frameborder="0" allowfullscreen></iframe>


<p>The repo for this episode can be found here: <a href="https://github.com/irlnathan/sails-crud-api-sailsAnswers8">https://github.com/irlnathan/sails-crud-api-sailsAnswers8</a></p>

<h1>Transcript</h1>

<p>Howdy and welcome back.  You&rsquo;re watching the third and final installment of our three part series.  In part one we learned how the http request/response protocol works with routes, controllers, actions and models to deliver a restful json CRUD api.  In part two we took those concepts and built the api from scratch.</p>

<p>In this episode we&rsquo;ll explore Sails <strong>blueprint: actions and routes</strong>, a powerful combination of functionality that are often used but not always fully understood.  The goal of this episode is to show you what the blueprints are all about and how to use them to make your programming life a bit easier. So where are we going to start?</p>

<p>First a small warning here. This episode relies heavily on the previous two screencasts, so if you start to experience dizziness, tightness in the chest, or depression, I highly recommend you review those screencasts.</p>

<p>Let&rsquo;s take a look at the roadmap of what we&rsquo;ll be covering in this episode.</p>

<p>There are four pre-built <em>blueprint: actions</em> (e.g. <code>find</code>, <code>create</code>, <code>update</code> and <code>destroy</code>).  As we&rsquo;ll see in a minute, these four actions  map directly to the CRUD api we buit in the last episode.  There are also three blueprint: route types, blueprint: actions routes, blueprint: rest routes, and blueprint: shortcuts routes.</p>

<p>I want to make one thing very clear from the beginning.  Blueprint: actions and blueprint: routes are virtualized in the sense that they are not explicitedly defined in controller files like SleepController.js or the routes.js file.  Instead, they&rsquo;re  built-up when sails starts using <code>sails lift</code>.  But as usual I&rsquo;m getting ahead of myself.</p>

<p>Let&rsquo;s start with seeing what happens when we combine  blueprint: actions and blueprint: rest routes.</p>

<p>So in the last episode I went over in excrutiating detail, how to make a restful json CRUD api.  The goal of api was to track our sleep patterns, specifically how much we sleep each night and the quality of that sleep.  The best way to show you how blueprints help you automate the creation of an api is to repeat the process of building the restful json CRUD api, however, add the power of blueprints.</p>

<p>Let&rsquo;s jump in here and create a new mySleep project.  I&rsquo;m in the terminal and will create the project using <code>sails new mySleep --linker</code> with the linker flag.  Next, I&rsquo;ll change into the mySleep folder and create a <code>sleep</code> model and controller using <code>sails generate sleep</code>.  Finally, I&rsquo;ll start the project using <code>sails lift</code>.  Okay, we&rsquo;re done, the api is complete.</p>

<p>But you DON&rsquo;T believe me? After all we&rsquo;ve been through.  Well I guess I&rsquo;ll have to prove it to you.</p>

<p>Seriously though, everything we did in the last episode was just built with those three commands.</p>

<p>I&rsquo;ll open a browser and once again using the POSTMAN chrome extension I&rsquo;ll make similar requests that we made in the last episode that relate to a CRUD api…</p>

<p><strong>Let&rsquo;s start with the Create portion of CRUD.</strong> I&rsquo;ll add an instance to the sleep model using the http verb <code>POST</code> to the path <code>/sleep</code> adding two parameters <code>hours_slept</code> and <code>sleep_quality</code>.  After sending the request the api returns our newly created record as json.  In fact, I&rsquo;ll make four more model instances inserting different values for <code>hours_slept</code> and <code>sleep_quality</code>.</p>

<p><strong>Next we&rsquo;ll try the Read portion of CRUD.</strong> Let&rsquo;s get all of the model instances by making a <code>GET</code> request to the path <code>/sleep</code>. After sending the request the api returned all five instances of the model:</p>

<p>Next, let&rsquo;s make a <code>GET</code> request to the path <code>/sleep/2</code>.  The api returns a single instance of the model with an <code>id</code> of 2:</p>

<p>Now let&rsquo;s try a request with some criteria.  We&rsquo;ll look for any model instances with an <code>id</code> not equal to 4, limited to 3 model instances and in descending order.</p>

<p>After making the request, the api returns three instances of the model in descending order.</p>

<p>Things are looking up for my assertion that our api was indeed complete.</p>

<p><strong>Next up, we&rsquo;ll try the Update portion of CRUD api.</strong> I&rsquo;m going to make a <code>put</code> request to the path:</p>

<p><code>http://localhost:1337/sleep/3?added_attrib=12</code></p>

<p>After making the request, the api returns our instance of the model that has an id of <code>3</code> with our added attrib formatted as json.</p>

<p><strong>Finally, we&rsquo;ll try the Delete portion of our CRUD api.</strong> Once again within the POSTMAN chrome extension I&rsquo;ll make a delete request to the path:</p>

<p><code>destroy</code> <code>http://localhost:1337/sleep/5</code></p>

<p>After sending the request the api responds with the model instance it just deleted formatted as json.</p>

<p>Let&rsquo;s take a quick check of the controller we created in <code>controllers/SleepController.js</code>. Yep, nothing in it.  Next let&rsquo;s look at the <code>config/routes.js</code> file.  Pretty much the same, nothing in there except the <code>home</code> route.</p>

<p>So at this point your probably wondering how in the heck are we able to use the same restful api end points that we used in the last episode BUT without any explicit actions are routes?</p>

<p>Is it mind control?</p>

<p>The really short answer is that we&rsquo;re using blueprint: actions and blueprint: rest routes to automate the process of building the api. The next question is, how do they work?</p>

<p>When sails initially starts using sails lift, sails looks to see if you have any controller&rsquo;s defined.  In our example, we have one controller, the Sleep controller.  Sails then provides access to blueprint: actions for this sleep controller as if we built them in the controller ourselves.  Sails also automatically creates blueprint: rest routes that are identical to the routes we explicitedly created in the last episode.  When combined together, the blueprint: actions  and blueprint: rest routes, give us the exact functionality we had in our manually created json restful CRUD api without having to create anything other than a project,  an empty controller, and an empty model.</p>

<p>So where are the blueprint: actions actually defined? Okay, nerd alert here, and when I say nerd alert, I&rsquo;m starting with myself, you can see what the actions look like by taking a look at the sails source <a href="https://github.com/balderdashy/sails/tree/master/lib/hooks/controllers">here</a> on github.   Looking at these actions they look very similar to the ones we created in the last episode.  The difference is that sails handles all of this in the background, creating the necessary blueprint: rest routes that connect the actions to our controllers automatically.  Again, this is all happening in memory without you having to explicitedly create anything.</p>

<p>Also, remember, that the mySleep project we&rsquo;ve been working through uses a single controller.  The blueprint: actions and blueprint: rest routes are not limited to a single controller so for a more complex project, with multiple controllers, sails blueprints: rest routes are built automatically for all of the controllers.</p>

<p>You can of course override any of the actions by explicitedly creating one of the actions in your controller.  For example, I&rsquo;ll go back to the SleepController, and create a find action that simply responds with &ldquo;I&rsquo;m your new explicit find action&rdquo; upon request.  Let&rsquo;s restart the server and go back into the browser.  I can still use the <code>create</code>, <code>update</code>, and <code>delete</code> actions, however, now when I make a <code>get</code> request to the path /sleep, I now receive our message .</p>

<p>So with sails you get the blueprint: actions and the blueprint: rest routes but wait there&rsquo;s more!  Sorry, couldn&rsquo;t resist that.  In addition, sails also provides blueprint: action routes, not to be confused with blueprint: actions.</p>

<p>blueprint: action routes speed up backend development and shorten the development workflow by eliminating the need to manually bind custom controller actions to requests through routes.</p>

<p>So when sails starts via sails lift, sails analyzes your controllers and if it finds an explicit action in a controller, it will bind <code>GET</code>, <code>POST</code>, <code>PUT</code>, and <code>DELETE</code> routes to the explicit action.  For example, in our sleep project, I&rsquo;ve added the action <code>query</code> to the sleep controller.  So when sails starts, using <code>sails lift</code>, sails will automatically build the following blueprint: actions routes:</p>

<ul>
<li><code>'get /sleep/query/:id?: UserController.query'</code></li>
<li><code>'post /sleep/query/:id?: UserController.query</code></li>
<li><code>'put /sleep/query/:id?: UserController.query</code></li>
<li><code>'delete /sleep/query:id?: UserController.query'</code></li>
</ul>


<p>Let&rsquo;s see it in action.  I&rsquo;ll open a browser and make a  <code>get</code> request to the path <code>/sleep/query</code>.  The <code>query</code> action responds with a view that can be found in views/sleep/query.ejs.</p>

<p>The important take-away here is that when I created a new action, in this case, the <code>query</code> action, I didn&rsquo;t have to create a route to bind a request to that action.  By using blueprint: actions routes sails did this for me automatically.</p>

<p>So let&rsquo;s go back to our blueprint: roadmap.  So far we&rsquo;ve covered blueprint: CRUD actions as well as blueprint: rest routes and blueprint: actions routes.  The final blueprint: route type is blueprint: shortcuts.</p>

<p>blueprint: shortcuts build routes that allow you to use the blueprint: actions from a browser.  I use blueprint: shortcuts during development as a handy way to manipulate my underlying model.</p>

<p>The best way to see how this works is through an example.</p>

<p>I can grab a list of all my model instances using the url <code>/sleep</code>.  I can create a new model instance using the url &lsquo;/sleep/create&rsquo; and adding the parameters sleep_quality and hours_slept.  I can also update that same instance using the url <code>/sleep/update</code> with the <code>id</code> of <code>8</code> and changing hours_slept from <code>10</code> to <code>9</code>.  Finally, I&rsquo;ll delete the model instance by using the url <code>/sleep/destroy/6</code>.</p>

<p>One bit of caution.  blueprint: shortcuts were not designed to be used in production.  So how do we disable parts of the blueprints?</p>

<p> The <code>blueprint: routes</code> and <code>blueprint: actions</code> are completely configurable.  That is, they can be disabled simply by setting the values of actions, rest, and/or shortcuts to <code>false</code> in the <code>\config\controllers.js</code> file.  You can have even finer granularity by setting the same values in  the <code>_config</code> object within each controller which will override what is in <code>\config\controllers.js</code> file.</p>

<p>Okay, we have a bunch of routes here, but how do they all fit together.  So all of these different routes have an order of precedence or rank.  When a request comes in sails first checks the explicit routes in routes.js.  Next it will look to see if there&rsquo;s a match in the blueprint: actions routes, followed by the blueprint: rest routes and finally, sails will see if there&rsquo;s a match in the blueprint: shortcuts routes.</p>

<p>So if there&rsquo;s a <code>get</code> request to the root route, sails will route it via <code>routes.js</code> to render <code>views/home/index.ejs</code>.</p>

<p>If there&rsquo;s a <code>get</code> request to <code>/sleep/query</code>, sails, finding no match in <code>routes.js</code>, will look to the blueprint: action routes and finding a match will route the request to the explicit <code>query</code> action of the Sleep Controller.</p>

<p>If there&rsquo;s a <code>delete</code> request to <code>/sleep/5</code>, sails, finding no match in <code>routes.js</code> or blueprint: action routes, will look to the blueprint: rest routes and finding a match will route the request to the blueprint: destroy action, returning a json object if successful.</p>

<p>Finally, if there&rsquo;s a reqest to <code>get</code> <code>/sleep/update/2</code> with some params, sails, finding no match in <code>routes.js</code>, blueprint: action nor rest routes, will look to the blueprint: shortcut routes and finding a match will route the request to the blueprint: CRUD update action, passing any params to the model&rsquo;s <code>update</code> method returning a json object if successful.</p>

<p>In this series we&rsquo;ve learned the concepts of how to use the http request/response protocol with routes, controllers, actions and models to deliver a restful json CRUD api.  Using those concepts we&rsquo;ve built the api from scratch.  Hopefully, after this episode it becomes apparent that blueprint: actions and routes are really about automation.   That is, eliminating the necessity of writing, at least initially, repetitive actions and routes during development.</p>

<p>We&rsquo;ve covered a lot of material and I hope you&rsquo;ve found it helpful.  As always thanks for watching and if you get a chance follow me on twitter at irlnathan.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sailsCasts Answers: Ep7: How do I create a restful json CRUD api in sails from scratch?]]></title>
    <link href="http://irlnathan.github.io/sailscasts/blog/2014/01/14/sailscasts-answers-ep7-how-do-i-create-a-restful-json-crud-api-in-sails-from-scratch/"/>
    <updated>2014-01-14T14:40:00-06:00</updated>
    <id>http://irlnathan.github.io/sailscasts/blog/2014/01/14/sailscasts-answers-ep7-how-do-i-create-a-restful-json-crud-api-in-sails-from-scratch</id>
    <content type="html"><![CDATA[<iframe width="640" height="390" src="http://www.youtube.com/embed/Hr8axUV6NpM" frameborder="0" allowfullscreen></iframe>


<p>The repo for this project can be found here: <a href="https://github.com/irlnathan/sails-crud-api">https://github.com/irlnathan/sails-crud-api</a></p>

<h1>Transcript</h1>

<p>Howdy and welcome back to part II of our three part series.  In the last episode we learned how the http request/response protocol works with routes, controllers, actions and models to deliver a restful json CRUD api.  In this episode we&rsquo;ll take the concepts we learned and use them to build the api from scratch. In the final episode we&rsquo;ll explore how sail&rsquo;s <em>blueprints: actions and routes</em> can be used to create that same restful json CRUD api automatically for any of your controllers and models.</p>

<p>Let&rsquo;s review what we&rsquo;re trying to accomplish.</p>

<p>Our api will be used to access and update information that tracks our sleep patterns including how much we sleep each night and the quality of that sleep.</p>

<p>So we want the api to be able to respond to requests to find, create, update or delete instances of our sleep model.  We&rsquo;ll create actions that corresond to the requests and then build up routes that match the appropriate http verbs and paths with the corresponding controller and action.</p>

<ul>
<li>So the <strong>find</strong> request will use the http verb <code>get</code> with the path <code>/sleep/:id?</code> and bind to the <code>sleep</code> controller and <code>find</code> action.</li>
<li>The <strong>create</strong> request will use the  verb <code>post</code> with the path <code>/sleep</code> and bind to the <code>sleep</code> controller and the <code>create</code> action.</li>
<li>The <strong>update</strong> request will use the verb <code>put</code> with the path <code>/sleep/:id?</code> and bind to the <code>sleep</code> controller and the <code>update</code> action.</li>
<li>and finally, the <strong>delete</strong> request will use the  verb <code>delete</code> with the path <code>/sleep/:id?</code> and bind to the <code>sleep</code> controller and <code>destroy</code> action.</li>
</ul>


<p>The actions will then use the model methods to find, create, update or destroy the model as requested and use the parameters <code>hours_slept</code> and <code>sleep_quality</code> to pass any necessary information within the request through the action to the model.  The action will then respond with the request status as well as any model instance or instances required.</p>

<p>So let&rsquo;s get started.  I&rsquo;m going to bring up a terminal window and we&rsquo;re going to create a new sails project called <code>mySleep</code> using <code>sails new mySleep --linker</code>.  and I&rsquo;ll change into the <code>mySleep</code> folder and generate a sleep controller and model using <code>sails generate sleep</code>.</p>

<p>So, here&rsquo;s a roadmap of what we&rsquo;re going to build.  I&rsquo;m going to start with the create action, building the action and then building the route that will bind the find request with the sleep controller and find action. I&rsquo;m going to go through each action, create it, and then build the matching route that will bind our request to the controller and action.   So let&rsquo;s start with the create action.</p>

<p>I&rsquo;ll open my sleep controller found in <code>/api/controllers/SleepController.js</code> and create my first action called <code>create</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// a CREATE action  </span>
</span><span class='line'><span class="nx">create</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">params</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">all</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">Sleep</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">params</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">sleep</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">return</span> <span class="nx">next</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">201</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">sleep</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The action is straightforward, we&rsquo;re going to grab the request&rsquo;s parameters in the var <code>params</code> and then pass <code>params</code>  into the <code>create</code> method of our <code>sleep</code> model.  If there&rsquo;s an error we&rsquo;ll return it and if not I&rsquo;ll send a 201 status code response with the newly created model instance formatted as json.</p>

<p>So that&rsquo;s the <code>create</code> action, now I need to create a route that will bind this controller and action to our request.  So let&rsquo;s open the routes in <code>/config/routes.js</code> and I&rsquo;ll add my route after the existing home route:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">.</span><span class="nx">routes</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="s1">&#39;/&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">view</span><span class="o">:</span> <span class="s1">&#39;home/index&#39;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Custom CRUD Rest Routes</span>
</span><span class='line'>  <span class="s1">&#39;post /sleep&#39;</span><span class="o">:</span> <span class="s1">&#39;SleepController.create&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>The route consists of the verb <code>post</code> to the path <code>/sleep</code> which is bound to the <code>sleep</code> controller and the <code>create</code> action.  So let&rsquo;s make sure our create action is working.  I&rsquo;ll go into the terminal, start sails with <code>sails lift</code>.  I&rsquo;ll again be using the POSTMAN chrome extension to test our requests.  We&rsquo;ll be using the http verb <code>POST</code> to the path <code>/sleep</code> adding two parameters <code>hours_slept</code> and <code>sleep_quality</code>.  When I click send, Sails returns my newly created record as json.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;hours_slept&quot;</span><span class="o">:</span> <span class="s2">&quot;8&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;sleep_quality&quot;</span><span class="o">:</span> <span class="s2">&quot;good&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;createdAt&quot;</span><span class="o">:</span> <span class="s2">&quot;2013-12-10T21:31:00.442Z&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;updatedAt&quot;</span><span class="o">:</span> <span class="s2">&quot;2013-12-10T21:31:00.442Z&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="mi">1</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So let&rsquo;s take a look at our api roadmap.  We&rsquo;ve built the create action as the first of the four actions of our api.  Next, we&rsquo;ll build the <code>find</code> action and then we&rsquo;ll build a route that will bind Sleep controller and find action to our request.  For the action let&rsquo;s go back into the <code>SleepController.js</code> file and look at the find action code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>   <span class="c1">// a FIND action</span>
</span><span class='line'><span class="nx">find</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">id</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">param</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">idShortCut</span> <span class="o">=</span> <span class="nx">isShortcut</span><span class="p">(</span><span class="nx">id</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">idShortCut</span> <span class="o">===</span> <span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">next</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">Sleep</span><span class="p">.</span><span class="nx">findOne</span><span class="p">(</span><span class="nx">id</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">sleep</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="nx">sleep</span> <span class="o">===</span> <span class="kc">undefined</span><span class="p">)</span> <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">notFound</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">return</span> <span class="nx">next</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">sleep</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">where</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">param</span><span class="p">(</span><span class="s1">&#39;where&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">_</span><span class="p">.</span><span class="nx">isString</span><span class="p">(</span><span class="nx">where</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">where</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">where</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// This allows you to put something like id=2 to work.</span>
</span><span class='line'>      <span class="c1">// if (!where) {</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">//     // Build monolithic parameter object</span>
</span><span class='line'>   <span class="c1">//    params = req.params.all();</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">//    params = _.omit(params, function (param, key) {</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">//        return key === &#39;limit&#39; || key === &#39;skip&#39; || key === &#39;sort&#39;</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">//    });</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">//   where = params;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">//   console.log(&quot;making it here!&quot;);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// }</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>                  <span class="nx">limit</span><span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">param</span><span class="p">(</span><span class="s1">&#39;limit&#39;</span><span class="p">)</span> <span class="o">||</span> <span class="kc">undefined</span><span class="p">,</span>
</span><span class='line'>                  <span class="nx">skip</span><span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">param</span><span class="p">(</span><span class="s1">&#39;skip&#39;</span><span class="p">)</span>  <span class="o">||</span> <span class="kc">undefined</span><span class="p">,</span>
</span><span class='line'>                  <span class="nx">sort</span><span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">param</span><span class="p">(</span><span class="s1">&#39;sort&#39;</span><span class="p">)</span> <span class="o">||</span> <span class="kc">undefined</span><span class="p">,</span>
</span><span class='line'>                  <span class="nx">where</span><span class="o">:</span> <span class="nx">where</span> <span class="o">||</span> <span class="kc">undefined</span>
</span><span class='line'>          <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;This is the options&quot;</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>
</span><span class='line'>              
</span><span class='line'>      <span class="nx">Sleep</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="nx">options</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">sleep</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="nx">sleep</span> <span class="o">===</span> <span class="kc">undefined</span><span class="p">)</span> <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">notFound</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">return</span> <span class="nx">next</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">sleep</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">isShortcut</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">id</span> <span class="o">===</span> <span class="s1">&#39;find&#39;</span>   <span class="o">||</span>  <span class="nx">id</span> <span class="o">===</span> <span class="s1">&#39;update&#39;</span> <span class="o">||</span>  <span class="nx">id</span> <span class="o">===</span> <span class="s1">&#39;create&#39;</span> <span class="o">||</span>  <span class="nx">id</span> <span class="o">===</span> <span class="s1">&#39;destroy&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Let&rsquo;s also take a look at the route that will bind our request to the sleep controller and <code>find</code> action in <code>/config/routes.js</code>:</p>

<p><code>'get /sleep/:id?': 'SleepController.find'</code></p>

<p>The route points to our <code>find</code> action but look the end of the path, what&rsquo;s up with <code>:id?</code>, and the question mark?  The question mark makes the <code>id</code> parameter optional.  That way we capture both the request <code>'get /sleep'</code> as well as <code>'get /sleep/:id'</code>.</p>

<p>The find action will be our most complex action of the four in our api.  This is because we have to provide for a request finding a single instance of the model, multiple instances of the model, as well as using criteria and options to narrow and/or limit the scope of the find request.</p>

<p>So within our find action, we&rsquo;ll attempt to assign a parameter called <code>id</code> to the var <code>id</code>.  The next line of code looks to see if the <code>id</code> is a shortcut.  I&rsquo;m going to skip over this part because shortcuts are part of sail&rsquo;s blueprints which we&rsquo;ll be discussing in the third episode.</p>

<p>So if the <code>id</code> exists we&rsquo;re going to assume that the request is looking for a particular model instance. We&rsquo;ll pass the <code>id</code> to the <code>findOne</code> model method and if we don&rsquo;t get back an instance of <code>sleep</code> in the callback, we&rsquo;ll return or respond with a status code of <code>404</code>&mdash; <code>not found</code>.  On success, we&rsquo;ll return and respond with the model instance formatted as json.</p>

<p><strong>Checking for multiple model instances.</strong> If no <code>id</code> is provided we&rsquo;ll start looking for other criteria or options that may have been passed as a parameter for finding one or more model instances.  Criteria is placed in a <code>where</code> clause which is just the key name for a criteria object.  For example, if your want to find all model instances where sleep_quality = good, your parameters would look like this: <code>?where={sleep_quality: "good"}</code>.  We&rsquo;ll also check for options that further limit the result in some way. For example, let&rsquo;s say we only want the first 5 model instances of our result.  The parameters would look like this: <code>?where={sleep_quality: "good"}&amp;limit=5</code>.</p>

<p>So if <code>where</code> exists as a parameter and the value for it is a string, we&rsquo;ll just parse it as json and assign it to the var <code>where</code>.  Even if <code>where</code> doesn&rsquo;t exist we&rsquo;ll still look for the keys <code>limit</code>, <code>skip</code>, and <code>sort</code> and place them within the options object. Finally, we&rsquo;ll pass the options object to the Find model method and if we don&rsquo;t get back an instance of <code>sleep</code> in the callback, we&rsquo;ll return or respond with a status code of <code>404</code>&mdash; <code>not found</code>.  On success, we&rsquo;ll return and respond with the model instance(s) formatted as json.</p>

<p>So we have the find action complete, let&rsquo;s make sure all of this works.  I&rsquo;ll head back to the terminal and restart the sails server using <code>sails lift</code> and then open a browser with the POSTMAN chrome extension. I&rsquo;ve added a few more instances of our sleep model.  Let&rsquo;s take a look by sending a <code>get</code> request to the path <code>/sleep</code>.  After sending the request the api returned five instances of the model:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;hours_slept&quot;</span><span class="o">:</span> <span class="s2">&quot;8&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;sleep_quality&quot;</span><span class="o">:</span> <span class="s2">&quot;good&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;createdAt&quot;</span><span class="o">:</span> <span class="s2">&quot;2014-01-09T23:36:01.552Z&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;updatedAt&quot;</span><span class="o">:</span> <span class="s2">&quot;2014-01-09T23:36:01.552Z&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="mi">1</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;hours_slept&quot;</span><span class="o">:</span> <span class="s2">&quot;12&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;sleep_quality&quot;</span><span class="o">:</span> <span class="s2">&quot;great&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;createdAt&quot;</span><span class="o">:</span> <span class="s2">&quot;2014-01-11T05:08:52.398Z&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;updatedAt&quot;</span><span class="o">:</span> <span class="s2">&quot;2014-01-11T05:08:52.399Z&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="mi">2</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;hours_slept&quot;</span><span class="o">:</span> <span class="s2">&quot;4&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;sleep_quality&quot;</span><span class="o">:</span> <span class="s2">&quot;poor&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;createdAt&quot;</span><span class="o">:</span> <span class="s2">&quot;2014-01-11T05:09:10.319Z&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;updatedAt&quot;</span><span class="o">:</span> <span class="s2">&quot;2014-01-11T05:09:10.319Z&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="mi">3</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;hours_slept&quot;</span><span class="o">:</span> <span class="s2">&quot;6&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;sleep_quality&quot;</span><span class="o">:</span> <span class="s2">&quot;so-so&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;createdAt&quot;</span><span class="o">:</span> <span class="s2">&quot;2014-01-11T05:09:20.456Z&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;updatedAt&quot;</span><span class="o">:</span> <span class="s2">&quot;2014-01-11T05:09:20.456Z&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="mi">4</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;hours_slept&quot;</span><span class="o">:</span> <span class="s2">&quot;10&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;sleep_quality&quot;</span><span class="o">:</span> <span class="s2">&quot;good&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;createdAt&quot;</span><span class="o">:</span> <span class="s2">&quot;2014-01-11T05:09:30.885Z&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;updatedAt&quot;</span><span class="o">:</span> <span class="s2">&quot;2014-01-11T05:09:30.885Z&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="mi">5</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since we didn&rsquo;t provide an <code>id</code> or any criteria or options, the api used the find model method and returned all instances of the model formatted as json.</p>

<p>Next, let&rsquo;s make a <code>get</code> request to the path <code>/sleep/2</code>.  After pressing send, the api returns a single instance of the model with an <code>id</code> of 2:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;hours_slept&quot;</span><span class="o">:</span> <span class="s2">&quot;12&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;sleep_quality&quot;</span><span class="o">:</span> <span class="s2">&quot;great&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;createdAt&quot;</span><span class="o">:</span> <span class="s2">&quot;2014-01-11T05:08:52.398Z&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;updatedAt&quot;</span><span class="o">:</span> <span class="s2">&quot;2014-01-11T05:08:52.399Z&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="mi">2</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s try a request with some criteria.  We&rsquo;ll look for any model instances with an <code>id</code> greater than 1:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">localhost</span><span class="o">:</span><span class="mi">1337</span><span class="o">/</span><span class="nx">sleep</span><span class="o">?</span><span class="nx">where</span><span class="o">=</span><span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;&gt;&quot;</span><span class="o">:</span>  <span class="mi">1</span><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>After making the request, the api returns four of the five model instances with <code>id</code>&rsquo;s greater than 1.</p>

<p>Finally, I&rsquo;m going to combine the criteria with some options. I&rsquo;m going to make a <code>get</code> request to the path <code>/sleep</code> for  model instances with an <code>id</code> not equal to 4, limited to 3 model instances and in descending order.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">localhost</span><span class="o">:</span><span class="mi">1337</span><span class="o">/</span><span class="nx">sleep</span><span class="o">?</span><span class="nx">where</span><span class="o">=</span><span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;!&quot;</span><span class="o">:</span>  <span class="mi">4</span><span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="o">&amp;</span><span class="nx">limit</span><span class="o">=</span><span class="mi">3</span><span class="o">&amp;</span><span class="nx">sort</span><span class="o">=</span><span class="nx">id</span> <span class="nx">desc</span>
</span></code></pre></td></tr></table></div></figure>


<p>After making the request, the api returns three instances of the model in descending order.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;hours_slept&quot;</span><span class="o">:</span> <span class="s2">&quot;10&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;sleep_quality&quot;</span><span class="o">:</span> <span class="s2">&quot;good&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;createdAt&quot;</span><span class="o">:</span> <span class="s2">&quot;2014-01-11T05:09:30.885Z&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;updatedAt&quot;</span><span class="o">:</span> <span class="s2">&quot;2014-01-11T05:09:30.885Z&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="mi">5</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;hours_slept&quot;</span><span class="o">:</span> <span class="s2">&quot;4&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;sleep_quality&quot;</span><span class="o">:</span> <span class="s2">&quot;poor&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;createdAt&quot;</span><span class="o">:</span> <span class="s2">&quot;2014-01-11T05:09:10.319Z&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;updatedAt&quot;</span><span class="o">:</span> <span class="s2">&quot;2014-01-11T05:09:10.319Z&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="mi">3</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;hours_slept&quot;</span><span class="o">:</span> <span class="s2">&quot;12&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;sleep_quality&quot;</span><span class="o">:</span> <span class="s2">&quot;great&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;createdAt&quot;</span><span class="o">:</span> <span class="s2">&quot;2014-01-11T05:08:52.398Z&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;updatedAt&quot;</span><span class="o">:</span> <span class="s2">&quot;2014-01-11T05:08:52.399Z&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="mi">2</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that we know that our <code>find</code> action is battle tested, let&rsquo;s go back to our api roadmap.  By building the create action and route and the find action and route we&rsquo;re half way through our api.  Next, we&rsquo;ll build the <code>update</code> action and then we&rsquo;ll build a route that will bind the Sleep controller and update action to our request.  Let&rsquo;s head back into the <code>SleepController.js</code> file and look at the update action code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// an UPDATE action</span>
</span><span class='line'>    <span class="nx">update</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">criteria</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">criteria</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">merge</span><span class="p">({},</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">all</span><span class="p">(),</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">id</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">param</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">badRequest</span><span class="p">(</span><span class="s1">&#39;No id provided.&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">Sleep</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="nx">id</span><span class="p">,</span> <span class="nx">criteria</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">sleep</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="nx">sleep</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">notFound</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">return</span> <span class="nx">next</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">sleep</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<p>The update action consists of finding the <code>id</code> of the model instance to update coupled with the criteria that will be updated.  If there&rsquo;s no <code>id</code> as a parameter we respond with a 400 status&mdash; &lsquo;No id provided&rsquo;.  Next we attempt to update the model instance using the <code>id</code> and criteria provided. If there&rsquo;s an error we&rsquo;ll return it and if not respond with the updated model instance formatted as json.</p>

<p>So now that we have the update action complete, we&rsquo;ll bind that action to the request forming a new update route:</p>

<p><code>'put /sleep/:id?': 'SleepController.update'</code></p>

<p>The route points to our <code>update</code> action and uses the same <code>:id?</code> pattern that we used in the <code>find</code> route.</p>

<p>Let&rsquo;s make sure all of this works.  I&rsquo;ll restart the sails server using <code>sails lift</code> and then open a browser with the POSTMAN chrome extension. I&rsquo;m going to first make a <code>put</code> request to the path:</p>

<p><code>http://localhost:1337/sleep/3?added_attrib=12</code></p>

<p>After making the request, the api returns our instance of the model that has an id of <code>3</code> with our added attrib formatted as json.</p>

<p>Next, I&rsquo;ll make a <code>put</code> request to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">http</span><span class="o">:</span><span class="c1">//localhost:1337/sleep/3</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;added_3&quot;</span><span class="o">:</span> <span class="mi">42</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>…but instead of using query parameters, I&rsquo;ll pass the update via the request body.  After making the request, the api returns our instance of the model that has an id of <code>3</code> with our added_3 attribute formatted as json.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="c1">// Custom Action Route</span>
</span><span class='line'>  <span class="s1">&#39;get /sleep/new&#39;</span><span class="o">:</span> <span class="s1">&#39;SleepController.new&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Custom CRUD Rest Routes</span>
</span><span class='line'>  <span class="s1">&#39;get /sleep/:id?&#39;</span><span class="o">:</span> <span class="s1">&#39;SleepController.find&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;post /sleep&#39;</span><span class="o">:</span> <span class="s1">&#39;SleepController.create&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;put /sleep/:id?&#39;</span><span class="o">:</span> <span class="s1">&#39;SleepController.update&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;delete /sleep/:id?&#39;</span><span class="o">:</span> <span class="s1">&#39;SleepController.destroy&#39;</span><span class="p">,</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that update action and route is complete it&rsquo;s time to build the last action of our api the <code>destroy</code> action and then bind it to our request to form the <code>delete</code> route.  Let&rsquo;s head back into the <code>SleepController.js</code> file and look at the destroy action code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// a DESTROY action</span>
</span><span class='line'>    <span class="nx">destroy</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">id</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">param</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">badRequest</span><span class="p">(</span><span class="s1">&#39;No id provided.&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">Sleep</span><span class="p">.</span><span class="nx">findOne</span><span class="p">(</span><span class="nx">id</span><span class="p">).</span><span class="nx">done</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">serverError</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">result</span><span class="p">)</span> <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">notFound</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">Sleep</span><span class="p">.</span><span class="nx">destroy</span><span class="p">(</span><span class="nx">id</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">return</span> <span class="nx">next</span> <span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<p>So we&rsquo;ll attempt to assign the <code>id</code> param to a var called <code>id</code>.  If it doesn&rsquo;t exist I&rsquo;ll return a 400&mdash; &lsquo;No id provided&rsquo;. If an <code>id</code> parameter was provided in the request, I&rsquo;ll attempt to find it in the <code>sleep</code> model.  If the model doesn&rsquo;t exist I&rsquo;ll  respond with a status code of <code>404</code>&mdash; <code>not found</code>.   If the mode instance does exist, I&rsquo;ll pass the <code>id</code>  to the destroy method of the model returning either an error if any, or the deleted model instance formatted as json.</p>

<p>Next I&rsquo;ll bind the destroy action with the request in its own <code>delete</code> route:</p>

<p><code>'delete /sleep/:id?': 'SleepController.destroy'</code></p>

<p>Let&rsquo;s check it out by restarting the sails server using <code>sails lift</code>. Once again within the POSTMAN chrome extension I&rsquo;ll make a delete request to the path:</p>

<p><code>destroy</code> <code>http://localhost:1337/sleep/5</code></p>

<p>After sending the request the api responds with the model instance it just deleted formatted as json.</p>

<p>Congratulations, you&rsquo;ve built a restful json CRUD api.  Any client-side device that supports http requests can now hit our api&rsquo;s endpoints and request and submit information about our sleep model.</p>

<p>In the next and final episode of this series I&rsquo;ll show you how sail&rsquo;s <em>blueprints: actions and routes</em> can be used to create this same restful json CRUD api we just created, automatically for any of your controllers and models.</p>

<p> Okay that was a lengthy one, As always, thanks  for watching and if you get a chance, follow me on twitter @irlnathan.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sailsCasts Answers: Ep6 - How does the http request/response protocol work  with routes]]></title>
    <link href="http://irlnathan.github.io/sailscasts/blog/2014/01/08/sailscasts-answers-ep6-how-does-the-http-request-slash-response-protocol-work-with-routes/"/>
    <updated>2014-01-08T09:48:00-06:00</updated>
    <id>http://irlnathan.github.io/sailscasts/blog/2014/01/08/sailscasts-answers-ep6-how-does-the-http-request-slash-response-protocol-work-with-routes</id>
    <content type="html"><![CDATA[<iframe width="640" height="390" src="http://www.youtube.com/embed/1c9f8Duamq0" frameborder="0" allowfullscreen></iframe>


<h1>Transcript</h1>

<p>Howdy and welcome back.  This episode is the first of a three part series.  We&rsquo;ll start with how the http request/response protocol works with routes, controllers, actions and models to deliver a restful json CRUD api.  By the end of the second episode you&rsquo;ll use these concepts to build a restful json CRUD api from scratch. In the third episode we&rsquo;ll explore how sail&rsquo;s <em>blueprint: actions and routes</em> can be used to create that same restful json CRUD api automatically for any of your controllers and models.</p>

<p>In lieu of being able to download this episode directly to your brain matrix-style, I&rsquo;ll instead provide a bird&rsquo;s eye view of all of the concepts we&rsquo;ll cover.  Nothing is more confusing than trying to learn something new in the abstract.  So let&rsquo;s begin with a tangible scenario for our restful json CRUD api.  Our api will be used to access and update information that tracks our sleep patterns including how much we sleep each night and the quality of that sleep.</p>

<p>So, we want our client-side device to be able to make requests to a our api running on a server and for that api to respond to our client-side device&rsquo;s requests. I&rsquo;m using the term &ldquo;client-side device&rdquo; very loosely here because the device can reside on your lap, your phone, or even your refrigerator.  If it can make a request it can use our api regardless of the type of client-side device.</p>

<p><strong>So, what types of requests will we be making to the api?</strong>  The request will interact with the api to either find, create, update or delete information about our sleep.  The api will in turn be listening for our request and using a router, routes, controllers, and utlimately actions to interact with our sleep information in something called a <code>model</code>.  The action will then respond to our client-side device with the status of our request and any additional information necessary to fulfill the request.</p>

<p>Now let&rsquo;s break-down each concept in detail. First let&rsquo;s strip down this diagram to the basics.</p>

<p><strong>So how do request and responses work?</strong> The request and response are part of the http protocol.  Don&rsquo;t let the term protocol throw you.  It&rsquo;s just a set of agreed upon rules that make it possible for different types of devices to communicate together across a network.</p>

<p>So, why are we starting with the <code>http</code> protocol?  Well, you&rsquo;ve got to start somewhere and although we could have started at ohm&rsquo;s law and worked our way up levels of abstraction to <code>http</code>, this would take an awfully long time and more importantly my knowledge once we go below the level of <code>http</code> drops rapidly to pretty much zero.  As a tangent, in case you are a complete nerd like myself and would like to learn more about the very low levels of abstraction, there&rsquo;s a great MIT course <a href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-002-circuits-and-electronics-spring-2007/index.htm">6.002</a> available on youtube which introduces the fundamentals of the lumped circuit abstraction.  But for our purposes anything below the <code>http</code> protocol we&rsquo;ll just say consists of <a href="http://en.wikipedia.org/wiki/Turtles_all_the_way_down">turtles all the way down</a>.</p>

<p>Recall that our api will support requests to find, create, update, or delete sleep information.</p>

<p><strong>But how will our api differentiate the requests?</strong>  That is, how will the api know that we want to find versus create, update versus delete a set of sleep information?</p>

<p>The <code>http</code> protocol provides the means to accomplish this via the use of <code>http</code> verbs &ndash; <code>get</code>, <code>post</code>, <code>put</code>, and <code>delete</code> and each of the http verbs line up with the type of request.</p>

<p>Most likely you use http verbs every day.  Each time you use your browser to open a web page, that browser is making a <code>get</code> request on your behalf.</p>

<p>As a quick aside you&rsquo;ll often hear the term CRUD functions when working with a web api.  CRUD stands for create, read, update and delete each of which match up nicely to our http verbs and actions.</p>

<p><strong>The verb is the first of three essential parts of our request.</strong> The other elements are the path, which relates to our controller, and we&rsquo;ll talk about in the next session and finally optional parameters which are just additional pieces of information we might want to send in our request.</p>

<p>The important take away here is we can now combine http verbs and paths to convey our intent to the api.  By using <code>'post /sleep'</code> the api knows ahh, create a new instance of sleep and by passing it parameters the api knows that we want to use those parameters as part of the sleep instance. How the api interprets this is the subject of the next section.</p>

<p>Before moving on though, you might be asking, how does my device generate a request.  I&rsquo;ve already said that when you request a web page in a browser you&rsquo;re making a <code>get</code> request.  Also most programming languages have a library associated with http.  In javascript, the jquery library uses $.get to make requests.</p>

<p>Let&rsquo;s take a quick field trip to check out a request in action.</p>

<p>I&rsquo;ll open a chrome browser which is using a chrome extension called POSTMAN.  POSTMAN allows me to make <code>http</code> requests using all of the verbs we were just talking about.  Without it, browsers are limited to <code>get</code> requests from the url window or <code>get</code> and <code>post</code> requests from an html form.  I&rsquo;m making the request to a completed version of our sails api, but don&rsquo;t worry about that for now.  I just want to show you an actual request in action.</p>

<p>So I&rsquo;m going to make a request using the verb <code>get</code> to the path <code>/sleep</code>.  And when I send the request via POSTMAN I get back all 5 instances of our model.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;hours_slept&quot;</span><span class="o">:</span> <span class="s2">&quot;12&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;sleep_quality&quot;</span><span class="o">:</span> <span class="s2">&quot;great&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;createdAt&quot;</span><span class="o">:</span> <span class="s2">&quot;2014-01-03T00:29:55.921Z&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;updatedAt&quot;</span><span class="o">:</span> <span class="s2">&quot;2014-01-03T00:29:55.921Z&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="mi">1</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;hours_slept&quot;</span><span class="o">:</span> <span class="s2">&quot;8&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;sleep_quality&quot;</span><span class="o">:</span> <span class="s2">&quot;good&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;createdAt&quot;</span><span class="o">:</span> <span class="s2">&quot;2014-01-03T00:30:03.544Z&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;updatedAt&quot;</span><span class="o">:</span> <span class="s2">&quot;2014-01-03T00:30:03.544Z&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="mi">2</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;hours_slept&quot;</span><span class="o">:</span> <span class="s2">&quot;6&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;sleep_quality&quot;</span><span class="o">:</span> <span class="s2">&quot;so-so&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;createdAt&quot;</span><span class="o">:</span> <span class="s2">&quot;2014-01-03T00:30:13.998Z&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;updatedAt&quot;</span><span class="o">:</span> <span class="s2">&quot;2014-01-03T00:30:13.998Z&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="mi">3</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;hours_slept&quot;</span><span class="o">:</span> <span class="s2">&quot;5&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;sleep_quality&quot;</span><span class="o">:</span> <span class="s2">&quot;bad&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;createdAt&quot;</span><span class="o">:</span> <span class="s2">&quot;2014-01-03T00:30:21.294Z&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;updatedAt&quot;</span><span class="o">:</span> <span class="s2">&quot;2014-01-03T00:30:21.294Z&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="mi">4</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;hours_slept&quot;</span><span class="o">:</span> <span class="s2">&quot;3&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;sleep_quality&quot;</span><span class="o">:</span> <span class="s2">&quot;bad&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;createdAt&quot;</span><span class="o">:</span> <span class="s2">&quot;2014-01-03T00:30:25.998Z&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;updatedAt&quot;</span><span class="o">:</span> <span class="s2">&quot;2014-01-03T00:30:25.998Z&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="mi">5</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>So that&rsquo;s it, that&rsquo;s a request.</p>

<p>Now, by making the <code>http</code> request to a server, we&rsquo;re indicating that some bit of code should be executed on the server as a result of making the request. The chunk of code that is executed is known as an action and these actions can be grouped together into a controller.</p>

<p><strong>But how do we link the request to the controller and action?</strong>  Well, that&rsquo;s where routes come in.</p>

<p>Routes are the instructions that tie the request to the controller and ultimately to the action.</p>

<p>So from our earlier example, the route consists of the verb&mdash; <code>post</code>, the path&mdash; <code>/sleep</code> which forms the request and pairs it with the sleep controller and the create action.</p>

<p>Although not part of the route per se, as we&rsquo;ve already seen parameters can also be part of the request and these parameters can pass information to the action.</p>

<p>So let&rsquo;s review, we now understand how the request and response works with the http protocol, that the router uses routes to tie the requests to the controller and action.</p>

<p><strong>So what does the action actually do?</strong>  The action is where the code resides to find one or more model instances, create a new model instance, update an existing model instance, or delete a model instance.</p>

<p><strong>What is a model?</strong>  A model is a representation of the attributes that describe the data your api will be managing. Our sleep model consists of hours_slept, and sleep_quality and sails automatically adds an id, createdAt and updatedAt attributes.  The sleep model is an object so in addition to model attributes like hours_slept, the sleep model also has methods like find, create, update, and destroy.  These are the methods that are called within our actions.  Now don&rsquo;t be confused by the fact that the actions and model methods have the same name, they share the same name because the action name relates to the ultimate model method the action will use.  As you&rsquo;ll see when building the api in the next episode, the actions combine code necessary to complete the request including calls to the model methods.</p>

<p>Having this seperation between the model and the place where your data resides is important because you might want to store your model in a sql database at first but later move it to a mongo database.  Or you might be using data that doesn&rsquo;t come from a database but instead from some other api.  That&rsquo;s really the power of a framework like sails in that we can learn one way of finding, creating, updating and destroying our model, and then let sails worry about how it actually accesses and/or stores it at the level of a database or other data source.  In fact, the sails community provides us with different adapters like posgresql and mongo from which we can pick and choose where our data ultimately resides at will.</p>

<p><strong>What is the model versus model instances.</strong>  Think of the model as the instructions for building something whereas an instance of that model is one of the things you&rsquo;ve built.</p>

<p>So let&rsquo;s finish this episode with looking at the response. Depending upon the request, our action is responsible for finding, creating, updating or deleting instances of our model. We&rsquo;ve learned that the model methods are called by the action. The action then responds to the request with the status of the request along with any model instance or instances associated with the action.</p>

<p>If you&rsquo;re new to this your head might start to spin a bit but don&rsquo;t panic in the next episode we&rsquo;ll use all of this conceptual knowledge to build our own restful json CRUD api.</p>

<p>if you get a chance, follow me on twitter @irlnathan and as always thanks for watching.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sailsCasts Answers: Ep5 - Where should I put the assets in my sails project?]]></title>
    <link href="http://irlnathan.github.io/sailscasts/blog/2013/12/05/sailscasts-answers-ep5-where-should-i-put-the-assets-in-my-sails-project/"/>
    <updated>2013-12-05T11:41:00-06:00</updated>
    <id>http://irlnathan.github.io/sailscasts/blog/2013/12/05/sailscasts-answers-ep5-where-should-i-put-the-assets-in-my-sails-project</id>
    <content type="html"><![CDATA[<iframe width="640" height="390" src="http://www.youtube.com/embed/8ugjV3dDmaU" frameborder="0" allowfullscreen></iframe>


<h1>Transcript</h1>

<p>Howdy and welcome back.</p>

<p>So I&rsquo;ve seen a bunch of questions asking where should you put your assets in your sail&rsquo;s project. In this episode I&rsquo;m going to talk specficially about javascript and css assets.</p>

<p>So, Sails uses <a href="http://gruntjs.com/">grunt</a> to manage assets.  And Grunt generically provides ways for you to automate repeititve tasks.  Sails uses grunt for tasks like syncing files between a project folder structure and the server&rsquo;s public folder, but as always, I&rsquo;m getting ahead of myself.</p>

<p>The configuration of <code>grunt</code> is based upon a file called <code>Gruntfile.js</code> found in the root of your sails project.  There’s a lot going on in this file, however, again I’m going to concentrate on the javascript and css assets.</p>

<h3>Your Project&rsquo;s Assets</h3>

<p>When you first create a project, you have the option of using the <code>--linker</code> flag.  I&rsquo;m going to actually create two projects, one with the linker flag and one without.  Let&rsquo;s compare the two.  Both have an <code>/assets</code> folder.  But the project with linker, not surprisingly has a <code>/linker</code> folder and that&rsquo;s within the <code>/assets</code> folder.  In the linker example, an additional <code>/templates</code> folder is also created.</p>

<p><strong>USING</strong> the <code>--linker</code> flag</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>/assets
</span><span class='line'>  /images
</span><span class='line'>  /linker
</span><span class='line'>    /js
</span><span class='line'>    /styles
</span><span class='line'>    /templates
</span></code></pre></td></tr></table></div></figure>


<p><strong>NOT USING</strong> the <code>--linker</code> flag</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>/assets
</span><span class='line'>  /images
</span><span class='line'>  /js
</span><span class='line'>  /styles
</span></code></pre></td></tr></table></div></figure>


<h3>The Server&rsquo;s Public Folder</h3>

<p>Okay, great we have a <code>/linker</code> folder, but so what?  Well, let&rsquo;s add some javascript and css to both projects and see what happens. I&rsquo;ve replaced the <code>index.ejs</code> file in the `/views/home&#8217; folder of both projects with some very basic mark-up.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h1&gt;</span>Custom View<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;custom&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, I added jquery to the <code>/js</code> folder of both projects.  I also added my own javascript file &mdash; <code>custom.js</code> to the <code>/js/</code> folder.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.custom&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;&lt;h1&gt;Yes Irl, javascript is here and if I&#39;m red css is working as well.&lt;/h1&gt;&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.custom&#39;</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;working&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally I added custom.css in the <code>/styles</code> folder:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.working</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span> <span class="nb">red</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If the javascript and css are being linked properly, this is what our page should look like.</p>

<p>The custom.js file appends some html to the div in the <code>index.js</code> file. Then it will add a new class <code>working</code> to the div which will trigger the css located in the <code>custom.css</code> file.</p>

<p>Let&rsquo;s take a look at the project where we used the <code>--linker</code> flag first.  I&rsquo;ll start sails using <code>sails lift</code>.  The first thing you&rsquo;ll notice is that a hidden <code>.tmp</code> folder is created. This is the server&rsquo;s public folder.  Opening up this folder reveals files that have been sync&rsquo;d with the <code>/assets</code> folder.  So we can see that jquery.js, custom.js, and custom.css files have all been copied into the public folder.  Next, I&rsquo;ll open up a browser and enter <code>localhost:1337</code>.  Our heading showed up, but something&rsquo;s up with my javascript because the appended html isn&rsquo;t showing up.  Let&rsquo;s take a look at the console.  Okay, there&rsquo;s our problem.  Jquery isn&rsquo;t being loaded.  Let&rsquo;s take a look at the page&rsquo;s source.  Jquery is there, however, it&rsquo;s being loaded in the wrong order.  You might be asking yourself, how, did those links make it into page in the first place.  That&rsquo;s where some addition Grunt magic happens.  Let&rsquo;s take a look at our layout.ejs file.</p>

<p>Here is where the javascript links have been placed.  Notice the two tags SCRIPTS and SCRIPTS END.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!--SCRIPTS--&gt;</span>
</span><span class='line'><span class="c">&lt;!--SCRIPTS END--&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is where Grunt will place links to any javascript files placed in the <code>/assets/linker/js</code> folder.  Grunt will also do this for our css between thse two tags, the STYLES and STYLES END:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!--STYLES--&gt;</span>
</span><span class='line'><span class="c">&lt;!--STYLES END--&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now you may have noticed these <code>socket.io.js</code>, <code>sails.io.js</code>, and <code>app.js</code> files that are being injected into <code>layout.ejs</code>. Not surprisingly these files have to do with socket.io and sails, however, for the purposes of this screencast we can ignore those files.</p>

<p>But we still have this ordering problem with jquery.  To fix this we can go back into the <code>Grunfile.js</code> and towards the top of this file is where Grunt is cofigured to inject css and javascript into <code>layout.ejs</code>.  I&rsquo;m going to put a path to jquery below some other javascript files but before this default &ldquo;catch-all&rdquo; link and I say catch-all link because as you can see with these astericks, grunt is going to look at the linker folder and any folder underneath the linker folder it&rsquo;s going to look for any files with the .js ending. It&rsquo;s going to take those files and place them in between these two tags.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">jsFilesToInject</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Below, as a demonstration, you&#39;ll see the built-in dependencies </span>
</span><span class='line'>    <span class="c1">// linked in the proper order order</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Bring in the socket.io client</span>
</span><span class='line'>    <span class="s1">&#39;linker/js/socket.io.js&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// then beef it up with some convenience logic for talking to Sails.js</span>
</span><span class='line'>    <span class="s1">&#39;linker/js/sails.io.js&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// A simpler boilerplate library for getting you up and running w/ an</span>
</span><span class='line'>    <span class="c1">// automatic listener for incoming messages from Socket.io.</span>
</span><span class='line'>    <span class="s1">&#39;linker/js/app.js&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// *-&gt;    put other dependencies here   &lt;-*</span>
</span><span class='line'>
</span><span class='line'>    <span class="s1">&#39;linker/js/jquery.js&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// All of the rest of your app scripts imported here</span>
</span><span class='line'>    <span class="s1">&#39;linker/**/*.js&#39;</span>
</span><span class='line'>  <span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>So now jquery will be loaded before any other javascript files located in the <code>assets/linker/js</code> folder.  Let&rsquo;s restart the sails server and go back to the browser and reload the page.  Great now links to both our javascript and css files are being injected correctly.  And just to make sure let&rsquo;s go back to the source.  And yes, we can see here that jquery is now being loaded before custom.js.</p>

<p>So to sum it up, having the linker folder provides for the automatic injection of links to any javascript or css files that are placed in the &lsquo;assets/linker/js&rsquo; or &lsquo;assets/linker/styles&rsquo; folders.  Grunt based upon Gruntfile.js injects the links in <code>layout.ejs</code>.</p>

<p>Now let&rsquo;s look at the project that doesn&rsquo;t have a linker folder.  When I start the sails server for this project using <code>sails lift</code>, the hidden <code>.tmp</code> folder is also created.  The javascript and css files are copied into the public folder this time without the <code>/linker</code> folder. I&rsquo;ll open up a browser and again go to <code>localhost:1337</code>.</p>

<p>This time, however, we don&rsquo;t have the appended text from the <code>custom.js</code> file nor the red color to the text from the <code>custom.css</code> file.  Why is that?  If we look at the <code>layout.ejs</code> file, you&rsquo;ll notice that the STYLE and SCRIPT tags are missing.  These are automatically inserted when using the linker flag.  Therefore, grunt doesn&rsquo;t have these tags to tell it where to put the javascript and css file paths.</p>

<p>We can &ldquo;upgrade&rdquo; this project simply by adding the tags in <code>layout.ejs</code>.  We also need to remove the paths that were initially added to layout.ejs when the project was created.  Now let&rsquo;s go into Gruntfile.js and insert the path to jquery like we did in the linker example.  Finally we&rsquo;ll need to move the css and javascript assets we currently have under a <code>/linker</code> folder.  Now when I start sails and open a browser, the appended html is displayed in red, just as we expected.  Looking at the page source, the css and javascript were injected properly and in the correct order into the page.</p>

<p>I hope you found this helpful and thanks as always for watching.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sailsCasts Answers: Ep4 - Creating a more attractive url in sails with slugs...really?]]></title>
    <link href="http://irlnathan.github.io/sailscasts/blog/2013/11/20/sailscasts-answers-ep4-creating-a-more-attractive-url-in-sails-with-slugs-dot-dot-dot-really/"/>
    <updated>2013-11-20T15:08:00-06:00</updated>
    <id>http://irlnathan.github.io/sailscasts/blog/2013/11/20/sailscasts-answers-ep4-creating-a-more-attractive-url-in-sails-with-slugs-dot-dot-dot-really</id>
    <content type="html"><![CDATA[<iframe width="640" height="390" src="http://www.youtube.com/embed/TBj8RGS88jE" frameborder="0" allowfullscreen></iframe>


<h1>Transcript</h1>

<p>Howdy and welcome to another thought provoking, informative sailscasts answers.  Okay, maybe that&rsquo;s a bit of a stretch but welcome all the same.  I&rsquo;ve been asked a number of times how to implement a more attractive url system in sails&hellip;commonly using slugs.</p>

<p>Let&rsquo;s take a look at an example. In activityOverlord when you&rsquo;re on the user profile page, the url is something like this <code>http://localhost:1337/user/show/5220fa7b8764043122000001</code>.  The ending part here is a mongoid.  And that id is not very human friendly.  What would be better is to have something like the person&rsquo;s username.  I&rsquo;ll be doing a separate episode incorporating attrative urls into activityOverlord, however, in this screencast I&rsquo;m going to show you how to do it generically for any project.</p>

<p>So I&rsquo;ll create a new project called slugsville by entering <code>sails new slugsville --linker</code> with the linker flag.  Next I&rsquo;ll change into the slugsville folder and generate a user controller and model using <code>sails generate user</code>.  So, let&rsquo;s take a look at the user model.  I&rsquo;m going to paste in attributes for name, company, email, and phone as well as an attribute called slug.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">attributes</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">name</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;string&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">required</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">slug</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>          <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;string&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">email</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;string&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">email</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">required</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">unique</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">company</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;string&#39;</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">phone</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;string&#39;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s switch to the user controller. I have a fairly generic create action that creates a user with params I&rsquo;ll send through the  <a href="https://chrome.google.com/webstore/detail/postman-rest-client/fdmmgilgnpjigdojojpjoooidkmcomcm?hl=en">Postman</a> chrome extension and then we&rsquo;ll return a json object.  When the user is created, however, we need to put some logic in that will process the username removing any spaces and lower casing the string before saving the value into the slug model attribute.  We&rsquo;ll do this by adding a <code>beforeCreate()</code> method to our <code>User</code> model.</p>

<p>So going back to the <code>User</code> model, I&rsquo;ll add the <code>beforeCreate()</code> method first chekcing whether <code>name</code> exists and then assigning the <code>slug</code> attribute the value of name with no spaces and all lowercase.  Finally we&rsquo;ll use the next() method to continue.  Let&rsquo;s see if that worked.</p>

<p>I&rsquo;ll go into the terminal and start the sails server using <code>sails lift</code>.  Next, we&rsquo;ll go into the browser and using the postman chrome extension, I&rsquo;ll create a new user with the following attributes.  And great both the user and more importantly the slug were created.</p>

<p>So now let&rsquo;s use this slug as a route parameter.  I&rsquo;ll head over into the `/config/routes.js file located in the config folder where we&rsquo;ll create two routes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">.</span><span class="nx">routes</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="s1">&#39;get /:slug&#39;</span><span class="o">:</span> <span class="s1">&#39;UserController.profile&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;get /user/:slug&#39;</span><span class="o">:</span> <span class="s1">&#39;UserController.profile&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// By default, your root route (aka home page) points to a view</span>
</span><span class='line'>  <span class="c1">// located at `views/home/index.ejs`</span>
</span><span class='line'>  <span class="c1">// </span>
</span><span class='line'>  <span class="c1">// (This would also work if you had a file at: `/views/home.ejs`)</span>
</span><span class='line'>  <span class="s1">&#39;/&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">view</span><span class="o">:</span> <span class="s1">&#39;home/index&#39;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Both <code>/:slug</code> and <code>/user/:slug</code> will bind themselves to the profile action of the User controller.  In the User controller, I&rsquo;ll create an action called profile. Next I&rsquo;ll grab the slug param and assign it to the var slug.  I want to let anything we catch with the slug param that has a dot in it like <code>image.png</code> to pass through without hitting our find method.  That way we reduce the overhead of searching for a user for params we know are not a name.  So if the param has a dot in it, we&rsquo;ll return next() which will continue to the next piece of middleware (if any).</p>

<p>Next, we&rsquo;ll try to find a user by the slug attribute passing in the slug variable we obtained form the param.  If we don&rsquo;t find a user, we&rsquo;ll again return <code>next()</code>.  If we do have a user I&rsquo;m going to pass the entire user object to the view, in this case <code>profile.ejs</code>.</p>

<p><code>profile.ejs</code> is a simple view template that displays the user name, company, email, and phone.  Finally, I&rsquo;m going to go back to the User controller and add a foo action to make sure that my action blueprint routes still work.  If your not familiar with blueprint routes, I&rsquo;m currently working on episode explaining blueprint routes, the first of which is devoted to action routes.  Here I&rsquo;m just adding the action foo that will return a 200 response.</p>

<p>Okay, let&rsquo;s see if all of this worked?  First, I&rsquo;m going to create a few other users within postman.  Here&rsquo;s a list of our users.  I can still access them via the id using <code>/user/1</code>.  But now I can access them by their username either at <code>/username</code> or <code>/user/username</code>.  I can also access my foo action.</p>

<p>I think that&rsquo;s a much better approach.  I&rsquo;ve left a link to this project&rsquo;s repo here if your interested and I hope that it was helpful and as always thanks for watching.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sailsCasts Answers: Ep3 - How do I create sample 'dummy' users for my sails project?]]></title>
    <link href="http://irlnathan.github.io/sailscasts/blog/2013/11/19/sailscasts-answers-ep3-how-do-i-create-sample-dummy-users-for-my-sails-project/"/>
    <updated>2013-11-19T15:02:00-06:00</updated>
    <id>http://irlnathan.github.io/sailscasts/blog/2013/11/19/sailscasts-answers-ep3-how-do-i-create-sample-dummy-users-for-my-sails-project</id>
    <content type="html"><![CDATA[<iframe width="640" height="390" src="http://www.youtube.com/embed/KYaAf9itjjo" frameborder="0" allowfullscreen></iframe>


<h1>Transcript</h1>

<p>Howdy, I was recently asked whether there was a way to create dummy or fake data for testing  in a sails project.  One way to accomplish this is using <code>/config/bootstrap.js</code>.  Although I can automate the creation of the users, I’ll still need some fake users for sails to create.  Instead of manually typing in each user’s attributes, I found this really handy online tool called <a href="http://www.generatedata.com/">generatedate</a>.  You have a bunch of options of how you want your data generated.  In this example I&rsquo;ll select name, company, and email selecting the simple json format.  I’ll copy all of these users and head over to the <code>bootstrap.js</code> file.</p>

<p>I&rsquo;ll copy our new users into an array called dummyUsers.  Next I&rsquo;ll use the <code>count()</code> method on our <code>user</code> model.  If there are any records in the User model than I&rsquo;ll call the callback and nothing will be altered in the database.  However, if there is no data in the model, I&rsquo;ll use the <code>create()</code> method on the User model, passing in the array <code>dummyUsers</code> and then calling the callback.  Note that the <code>boostrap.js</code> is run once each time sails is started via <code>sails lift</code>.</p>

<p>So, let&rsquo;s see if that worked.  I&rsquo;ll go over to the terminal and enter sails lift.  Next, I&rsquo;ll get a list of user by entering <code>/user</code> into the browser.  And there&rsquo;s our hundred or so users.</p>

<p>I’ve posted a link to the <a href="https://github.com/irlnathan/sails-bootstrap-example">github repo</a> of this project and I hope this was helpful.  Thanks as always for watching.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a sails application ep26 - Deploying a sails app to Heroku.]]></title>
    <link href="http://irlnathan.github.io/sailscasts/blog/2013/11/05/building-a-sails-application-ep26-deploying-a-sails-app-to-heroku/"/>
    <updated>2013-11-05T22:30:00-06:00</updated>
    <id>http://irlnathan.github.io/sailscasts/blog/2013/11/05/building-a-sails-application-ep26-deploying-a-sails-app-to-heroku</id>
    <content type="html"><![CDATA[<iframe width="640" height="390" src="http://www.youtube.com/embed/ClHsv81XeaE" frameborder="0" allowfullscreen></iframe>


<h1>Transcript</h1>

<p>Howdy and welcome back.  Like most of episodes this one is going to move quickly. I do this so they don’t go on forever, however, I highly recommend stopping and rewatching parts that might go to fast.   So, I thought it would be useful to go over how to deploy activityOverlord into the wild.  This episode will cover deployment to heroku, a self-described cloud application platform.</p>

<p><img class="center" src="http://irlnathan.github.io/sailscasts/images/ep26/deployment.004.jpg"></p>

<p>Heroku makes it really easy to deploy node apps without a lot of the overhead typically associated with deploymnet.  Although this episode will concentrate on heroku, I plan on covering other platforms in future episodes.</p>

<p>First, let’s look at the current stack of technologies used by activityOverlord.</p>

<p><img class="center" src="http://irlnathan.github.io/sailscasts/images/ep26/deployment.005.jpg"></p>

<p>I’m running OS X Mountain Lion locally on a MacBook Pro.  I’ve got node installed and sails of course runs on top of that.   Our models, currently the user model,  uses a mongodb database also running locally on mountain lion.  And finally, we store our sessions and sockets in memory.</p>

<p>To do this deployment the stack of technologies is going to change.</p>

<p>For example, instead of running locally on OS X Mountain Lion, node and sails will run on an instance of the hardware and software provided by heroku.  Looking at the heroku docs, node.js runs on instances of <a href="https://devcenter.heroku.com/articles/stack">Ubuntu 10.04</a>.</p>

<p>Next, instead of our current local mongodb database, we’ll create a new instance of the database on a hosted solution provided by mongohq. Finally, we’ll move our in memory socket and session store to redis and specifically redis-to-go hosted by heroku as well.</p>

<p><img class="center" src="http://irlnathan.github.io/sailscasts/images/ep26/deployment.010.jpg"></p>

<p>Moving from local mongodb to hosted mongohq
So you’ll first need to create an account on mongohq.   Once you have an account and are logged in, create a new hosted mongodb instance using the sandbox option.  Although this option isn’t for production it works for the purposes our project.  Next, I created a user for the database that we’ll use to authenticate in our app.</p>

<p>So I want to incorporate this hosted database in my local instance of activityOverlord before we move it to heroku and we do that by changing the <code>local.js</code> file.  First let’s do a bit of review.</p>

<p><img class="center" src="http://irlnathan.github.io/sailscasts/images/ep26/deployment.014.jpg"></p>

<p>Our local configuration of mongoDB uses <code>local.js</code> within the config folder while <code>adapters.js</code> is completely commented out at the moment. The <code>adapters.js</code> file is one place sails looks to for connections to databases.  The local.js file overrides anything contained in <code>adapters.js</code>.  Also recall that local.js is part of <code>.gitignore</code> so the file will not be saved to git or our repo.</p>

<p>The impact of this is that anything sails relies upon in terms of configuration in local.js will not be part of the deployment unless we provide for it somewhere else in the code or by using environment variables prior to deployment.</p>

<p>Before we address the deployment issues lets first go into the code and make a few changes to <code>local.js</code> to use our new mongohq instance.</p>

<p>We no longer need the host, user, password, and database attributes because they are combined in a new attribute called url.  I’ll copy and paste the url from the mongohq interface and then insert the username and password I created earlier for the database.</p>

<p>/config/local.js</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">adapters</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>   <span class="s1">&#39;default&#39;</span><span class="o">:</span> <span class="s1">&#39;mongo&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">mongo</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">module</span>   <span class="o">:</span> <span class="s1">&#39;sails-mongo&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;mongodb://admin:1234@paulo.mongohq.com:10099/activityoverlord&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">schema</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let’s see if this worked.  I’ll go into the terminal and lift activityoverlord.  Next, I’ll create a new user and great it looks like things are working.  So, I’ll go back into mongohq and into the user collection and there’s my new user.  To start things off, I’ll change my admin attribute to true. Now, I’ll log-in to the account and&hellip;great I have my admin user set-up.</p>

<p>Okay, now, let’s deploy to heroku.  If you don’t already have an account on heroku, go ahead and create one now.  Next, you’ll want to install the heroku toolbelt which can be found <a href="https://toolbelt.heroku.com/">here</a>. Finally, you’ll want to login to heroku from the terminal.  So let’s go to the terminal and type heroku login, this is going to ask us for our  heroku credentials and the first time you run it, it’s also going to set-up your public SSH key.  Don’t worry If you don’t already have one, heroku will walk you through setting one up.</p>

<p>So now that we have an account, got the toolbelt installed, and we’ve logged in from the terminal, we want to back to the heroku dashboard and select create a new app.  If you want to enter in an app name it will need to be something other than activityoverlord as app names must be unique.  If you don’t put in an app name, heroku will create one for you and regardless, you can always go back and rename your app later.</p>

<p>Now you’ll recall that we have a local.js file pointing to the mongodb database hosted on mongohq. Since <code>local.js</code> will not be part of our repo because of <code>.gitignore</code> we need some way of letting the heroku server instance know about the mongodb configuration and we do this with environment variables.  So let’s go back into our <code>adapters.js</code> file and I’m going to copy and paste the mongodb configuration information from our local.js file into this adapters.js file.  However, I’m going to replace where we have a string that contains the Username, password,path, and port of our mongodb instance on mongohq with an environment variable called DB_URL and that’s going to be prefaced by process.env.</p>

<p>/config/adapters.js</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s1">&#39;default&#39;</span><span class="o">:</span> <span class="s1">&#39;mongo&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">mongo</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">module</span>   <span class="o">:</span> <span class="s1">&#39;sails-mongo&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">url</span><span class="o">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">DB_URL</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">schema</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, process.env is a node object that contains our environment which also includes the environment variables that we’ll add to it.  So to add the environment variable to our heroku instance, let’s go back to the terminal and we’ll type <code>heroku config:set DB_URL=</code>  and to get our path I’ll look in our <code>local.js</code> and copy the path of our mongohq instance and paste it here, I’ll also add &mdash;app activitityoverlord1 to point specify which app to associate with.</p>

<p>So we’ve set DB_URL on the remote heroku instance using <code>heroku config:set</code> and used that environment variable in our <code>adapters.js</code> file to point to our mongoHQ instance.</p>

<p>So how is heroku going to start ativityoverlord?  We do that by creating a <code>Procfile</code> in the root of our app.  A Procfile is a mechanism for declaring what commands are run by our app’s dynos on the Heroku platform. More on dynos in a second.  Let’s go back into the code and add a new file named Procfile with no extension.  The file will have one line: <code>web: node app.js</code></p>

<p>Next, make sure you have sails-mongo in your <code>package.json</code> file and that it’s installed in node_modules.  In fact it’s probably best to do an npm install to make sure you have all of the depencies installed.  Now we need to link up the heroku end point with our project.  Let’s go back to the heroku dashboard and look under the settings tab. Go ahead and c opy the git url and then go back to the terminal and enter: <code>git remote add heroku &lt;and then paste the git url here&gt;</code> and press enter.  Add all of your changes to git using: <code>git add .</code> and then commit them using <code>git commit -am “my very descriptive change log”</code>.  Finally push the project by entering: <code>git push heroku master</code>.</p>

<p>The last step before we fire up our browser and look at activityOverlord is to set up a dyno  for our app.  Heroku suggests thinking of a dyno asa virtualized Unix container.  In sum, it’s the place where our app will run.  To assign one dyno to our app, type: <code>heroku ps:scale web=1</code>.</p>

<p>So let’s go back into the browser, refresh the app, and log-in.  Everything looks to be working, however, open up the console and you’ll see an error.  Socket.io is doing its job.  Websockets isn’t working so its failing over to long polling so we still have a connection.  As it turns out, heroku has just started to support web sockets and you must enable it on the application instance.  To do that, we’ll go back to the console and type <code>heroku labs:enable websockets</code>.   It can take a second before websockets starts working.  There we go.  Also, I have had issues with it periodically failing and going back to web polling, but it is in beta so we’ll see how it improves over the coming weeks.</p>

<p>Next, I want to take a look at moving our session and socket store to redis.  But first, why would we want to do this in the first place?  Let’s take the following example.  I have three instances of heroku running activityOverlord on each instance. I use a load balancer to distribute the incoming requests across the three instances.</p>

<p><img class="center" src="http://irlnathan.github.io/sailscasts/images/ep26/deployment.025.jpg"></p>

<p>Suppose we store sessions in memory, and on the first request the load balancer sends us to instance A where we authenticate and the session cookie is set for that server instance.  On the next request we’re sent to instance B, where we haven’t yet authenticated and therefore won’t be able to access the resources we would have had access on instance A.  Therefore we need some way for the multiple instances of our application to share the same session store.</p>

<p><img class="center" src="http://irlnathan.github.io/sailscasts/images/ep26/deployment.028.jpg"></p>

<p>This is why we’re moving our session and socket store to redis.</p>

<p>So let’s set-up redis.  We’ll head back to the heroku dashboard and our activityoverlord instance. Select add-ons and redis-to-go. Under Plans, select Nano, or the free plan.  I had to put in a credit card despite picking the free option.  Select add nano for free. Go back to you instance of activityoverlord and select redis-to-go nano under add-ons.</p>

<p>Here you’ll see the configuration path to our redis instance.  First, let’s go into activityoverlord and our <code>session.js</code> file.  As the documentation suggests, I’m going to uncomment, the adapter, host, port, db, and password keys. We can then go back to our redis-to-go configuration file and copy and paste each value into the keys in <code>session.js</code>.</p>

<p>/config/session.js</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">adapter</span><span class="o">:</span> <span class="s1">&#39;redis&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">host</span><span class="o">:</span> <span class="s1">&#39;soldierfish.redistogo.com&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">port</span><span class="o">:</span> <span class="mi">9599</span><span class="p">,</span>
</span><span class='line'>  <span class="c1">// ttl: &lt;redis session TTL in seconds&gt;,</span>
</span><span class='line'>  <span class="nx">db</span><span class="o">:</span> <span class="s1">&#39;redistogo&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">pass</span><span class="o">:</span> <span class="s1">&#39;d5d68502e87bf36e5d6d25d9c0f37b5a&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Okay, let’s see if this worked.  I’ll go back into the terminal and commit my changes and then push them to our heroku instance.  Now let’s go back to the browser and try to log in.  Even though that worked the true test, is whether our session id is in the redis database.  To determine this, I’m going to use the <code>redis-cli</code> command line tool.  To use this tool we need to again use the host, port and password to authenticate to the database.  Once connected I’ll use the <code>keys</code> command passing in an <code>*</code> as an argument to get all keys.  And there’s our session key, great.  The redis website has good documentation on other useful commands.</p>

<p>You might be asking yourself, I don’t really want to put my redis database credentials in my github repo, and you know you would be right, that would be a very bad idea!  So instead we can use environment variables to set these credentials to our heroku instance.  Let’s go back into <code>session.js</code> and change the values for the host, port, db, and pass keys to environment variables.</p>

<p>/config/session.js</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">adapter</span><span class="o">:</span> <span class="s1">&#39;redis&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">host</span><span class="o">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">REDIS_HOST</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">port</span><span class="o">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">REDIS_PORT</span><span class="p">,</span>
</span><span class='line'>  <span class="c1">// ttl: &lt;redis session TTL in seconds&gt;,</span>
</span><span class='line'>  <span class="nx">db</span><span class="o">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">REDIS_DB</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">pass</span><span class="o">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">REDIS_PASS</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now the server instance will be looking for those environment variables for the values.  We’ll set them on the heroku instance the same way we did for <code>DB_URL</code> using <code>heroku config:set</code>.</p>

<p>Okay, now let’s do the same for sockets.  We’ll go back to <code>sockets.js</code>.  Similar to <code>session.js</code> we’ll uncomment the host, port, db, and pass keys and then insert the environment variables for the values.</p>

<p>/config/sockets.js</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">adapter</span><span class="o">:</span> <span class="s1">&#39;redis&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">host</span><span class="o">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">REDIS_HOST</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">port</span><span class="o">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">REDIS_PORT</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">db</span><span class="o">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">REDIS_DB</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">pass</span><span class="o">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">REDIS_PASS</span><span class="p">,</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, I’m going to go back to the terminal and commit my changes again and push them to our heroku instance.  Now I’ll go back to the browser, notice that I don’t have to login as my session is now maintained by redis whereas before we were doing things in memory which required us to login each time the server was lifted.  I’ll manually log out and log back in. And great it looks like everything is working.</p>

<p>Okay, the last thing I want to address with deployment is changing the value of the <code>NODE_ENV</code> variable from development to production.  For sails one of the biggest outwardly facing changes as a result of using production instead of development is that all of our css files will be combined and minified into one file.  Javascript files will also be combined and minified as well.  In addition many modules utilize <code>NODE_ENV</code> as a hook to determine whether to make changes based upon its value.  We’re going to actually set the environment variable in our <code>Procfile</code>.  So let’s go over to the <code>Procfile</code> and add <code>web: NODE_ENV=production node app.js</code>.  I’ll commit my changes and push them to heroku.  Back in the browser I’ll refresh the page and then look at the source to confirm that all of my css is minified in one file and all of my javascript is minified in one file.</p>

<p>So now that we’ve successfully deployed activityOverlord to Heroku I want to address the work-flow for moving forward with development.  The repo for activityOverlord will have the following set-up for <code>local.js</code>, <code>adapter.js</code>, <code>session.js</code>, and <code>sockets.js</code>.  The <code>local.js</code> file will default to our local instance of mongodb.</p>

<p>/config/local.js</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">port</span><span class="o">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">1337</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// The runtime &quot;environment&quot; of your Sails app is either &#39;development&#39; or &#39;production&#39;.</span>
</span><span class='line'>  <span class="c1">//</span>
</span><span class='line'>  <span class="c1">// In development, your Sails app will go out of its way to help you</span>
</span><span class='line'>  <span class="c1">// (for instance you will receive more descriptive error and debugging output)</span>
</span><span class='line'>  <span class="c1">//</span>
</span><span class='line'>  <span class="c1">// In production, Sails configures itself (and its dependencies) to optimize performance.</span>
</span><span class='line'>  <span class="c1">// You should always put your app in production mode before you deploy it to a server-</span>
</span><span class='line'>  <span class="c1">// This helps ensure that your Sails app remains stable, performant, and scalable.</span>
</span><span class='line'>  <span class="c1">// </span>
</span><span class='line'>  <span class="c1">// By default, Sails sets its environment using the `NODE_ENV` environment variable.</span>
</span><span class='line'>  <span class="c1">// If NODE_ENV is not set, Sails will run in the &#39;development&#39; environment.</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">environment</span><span class="o">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span> <span class="o">||</span> <span class="s1">&#39;development&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// LOCAL MONGO DB</span>
</span><span class='line'>  <span class="nx">adapters</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>   <span class="s1">&#39;default&#39;</span><span class="o">:</span> <span class="s1">&#39;mongo&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">mongo</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">module</span>   <span class="o">:</span> <span class="s1">&#39;sails-mongo&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">host</span>     <span class="o">:</span> <span class="s1">&#39;localhost&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">user</span>     <span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">password</span> <span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">database</span> <span class="o">:</span> <span class="s1">&#39;activityoverlord&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">schema</span>   <span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// // // HOSTED MONGO HQ</span>
</span><span class='line'>  <span class="c1">// adapters: {</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//  &#39;default&#39;: &#39;mongo&#39;,</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//   mongo: {</span>
</span><span class='line'>  <span class="c1">//     module   : &#39;sails-mongo&#39;,</span>
</span><span class='line'>  <span class="c1">//     url: &quot;mongodb://admin:1234@paulo.mongohq.com:10099/activityoverlord&quot;,</span>
</span><span class='line'>  <span class="c1">//     schema: true</span>
</span><span class='line'>  <span class="c1">//   }</span>
</span><span class='line'>  <span class="c1">// }</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want the local version of activityOverlord to use hosted mongohq instance, just uncomment and comment the following lines.  Since <code>local.js</code> will overwrite <code>adapters.js</code> we can leave the existing code in it.</p>

<p>/config/adapters.js</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">.</span><span class="nx">adapters</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="s1">&#39;default&#39;</span><span class="o">:</span> <span class="s1">&#39;mongo&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">mongo</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">module</span>   <span class="o">:</span> <span class="s1">&#39;sails-mongo&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">url</span><span class="o">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">DB_URL</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">schema</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Session.js will use the in memory session store, but when you want to deploy just uncomment these lines and comment your in memory config.</p>

<p>/config/session.js</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">.</span><span class="nx">session</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Session secret is automatically generated when your new app is created</span>
</span><span class='line'>  <span class="c1">// Replace at your own risk in production-- you will invalidate the cookies of your users,</span>
</span><span class='line'>  <span class="c1">// forcing them to log in again. </span>
</span><span class='line'>  <span class="nx">secret</span><span class="o">:</span> <span class="s1">&#39;d494d185735d00432bc3485d32bd5ca8&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// In production, uncomment the following lines to set up a shared redis session store</span>
</span><span class='line'>  <span class="c1">// that can be shared across multiple Sails.js servers</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// HOSTED REDIS INSTANCE</span>
</span><span class='line'>  <span class="nx">adapter</span><span class="o">:</span> <span class="s1">&#39;redis&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">host</span><span class="o">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">REDIS_HOST</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">port</span><span class="o">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">REDIS_PORT</span><span class="p">,</span>
</span><span class='line'>  <span class="c1">// ttl: &lt;redis session TTL in seconds&gt;,</span>
</span><span class='line'>  <span class="nx">db</span><span class="o">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">REDIS_DB</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">pass</span><span class="o">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">REDIS_PASS</span>
</span><span class='line'>  <span class="c1">// prefix: &#39;sess:&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// // USE IN MEMORY</span>
</span><span class='line'>  <span class="c1">//   adapter: &#39;memory&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Uncomment the following lines to use your Mongo adapter as a session store</span>
</span><span class='line'>  <span class="c1">// adapter: &#39;mongo&#39;,</span>
</span><span class='line'>  <span class="c1">//</span>
</span><span class='line'>  <span class="c1">// host: &#39;localhost&#39;,</span>
</span><span class='line'>  <span class="c1">// port: 27017,</span>
</span><span class='line'>  <span class="c1">// db: &#39;sails&#39;,</span>
</span><span class='line'>  <span class="c1">// collection: &#39;sessions&#39;,</span>
</span><span class='line'>  <span class="c1">//</span>
</span><span class='line'>  <span class="c1">// Optional Values:</span>
</span><span class='line'>  <span class="c1">//</span>
</span><span class='line'>  <span class="c1">// # Note: url will override other connection settings</span>
</span><span class='line'>  <span class="c1">// url: &#39;mongodb://user:pass@host:port/database/collection&#39;,</span>
</span><span class='line'>  <span class="c1">//</span>
</span><span class='line'>  <span class="c1">// username: &#39;&#39;,</span>
</span><span class='line'>  <span class="c1">// password: &#39;&#39;,</span>
</span><span class='line'>  <span class="c1">// auto_reconnect: false,</span>
</span><span class='line'>  <span class="c1">// ssl: false,</span>
</span><span class='line'>  <span class="c1">// stringify: true</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>The same holds true for the <code>Sockets.js</code> configuration file.</p>

<p>/config/sockets.js</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Socket Configuration</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * These configuration options provide transparent access to Sails&#39; encapsulated</span>
</span><span class='line'><span class="cm"> * pubsub/socket server for complete customizability.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * For more information on using Sails with Sockets, check out:</span>
</span><span class='line'><span class="cm"> * http://sailsjs.org/#documentation</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">.</span><span class="nx">sockets</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// `transports`</span>
</span><span class='line'>  <span class="c1">//</span>
</span><span class='line'>  <span class="c1">// A array of allowed transport methods which the clients will try to use.</span>
</span><span class='line'>  <span class="c1">// The flashsocket transport is disabled by default</span>
</span><span class='line'>  <span class="c1">// You can enable flashsockets by adding &#39;flashsocket&#39; to this list:</span>
</span><span class='line'>  <span class="nx">transports</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>  <span class="s1">&#39;websocket&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;htmlfile&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;xhr-polling&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;jsonp-polling&#39;</span>
</span><span class='line'> <span class="p">],</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Use this option to set the datastore socket.io will use to manage rooms/sockets/subscriptions:</span>
</span><span class='line'>  <span class="c1">// default: memory</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// HOSTED REDIS INSTANCE</span>
</span><span class='line'>  <span class="nx">adapter</span><span class="o">:</span> <span class="s1">&#39;redis&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">host</span><span class="o">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">REDIS_HOST</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">port</span><span class="o">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">REDIS_PORT</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">db</span><span class="o">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">REDIS_DB</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">pass</span><span class="o">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">REDIS_PASS</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// IN MEMORY</span>
</span><span class='line'>     <span class="c1">// adapter: &#39;memory&#39;,</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Worth mentioning is that, if `adapter` config is `redis`, </span>
</span><span class='line'>  <span class="c1">// but host/port is left unset, Sails will try to connect to redis </span>
</span><span class='line'>  <span class="c1">// running on localhost via port 6379  </span>
</span><span class='line'>  <span class="c1">// `authorization`</span>
</span><span class='line'>  <span class="c1">//</span>
</span><span class='line'>  <span class="c1">// Global authorization for Socket.IO access, </span>
</span><span class='line'>  <span class="c1">// this is called when the initial handshake is performed with the server.</span>
</span><span class='line'>  <span class="c1">// </span>
</span><span class='line'>  <span class="c1">// By default (`authorization: true`), when a socket tries to connect, Sails verifies</span>
</span><span class='line'>  <span class="c1">// that a valid cookie was sent with the upgrade request.  If the cookie doesn&#39;t match</span>
</span><span class='line'>  <span class="c1">// any known user session, a new user session is created for it.</span>
</span><span class='line'>  <span class="c1">//</span>
</span><span class='line'>  <span class="c1">// However, in the case of cross-domain requests, it is possible to receive a connection</span>
</span><span class='line'>  <span class="c1">// upgrade request WITHOUT A COOKIE (for certain transports)</span>
</span><span class='line'>  <span class="c1">// In this case, there is no way to keep track of the requesting user between requests,</span>
</span><span class='line'>  <span class="c1">// since there is no identifying information to link him/her with a session.</span>
</span><span class='line'>  <span class="c1">//</span>
</span><span class='line'>  <span class="c1">// If you don&#39;t care about keeping track of your socket users between requests,</span>
</span><span class='line'>  <span class="c1">// you can bypass this cookie check by setting `authorization: false`</span>
</span><span class='line'>  <span class="c1">// which will disable the session for socket requests (req.session is still accessible </span>
</span><span class='line'>  <span class="c1">// in each request, but it will be empty, and any changes to it will not be persisted)</span>
</span><span class='line'>  <span class="c1">//</span>
</span><span class='line'>  <span class="c1">// On the other hand, if you DO need to keep track of user sessions, </span>
</span><span class='line'>  <span class="c1">// you can pass along a ?cookie query parameter to the upgrade url, </span>
</span><span class='line'>  <span class="c1">// which Sails will use in the absense of a proper cookie</span>
</span><span class='line'>  <span class="c1">// e.g. (when connection from the client):</span>
</span><span class='line'>  <span class="c1">// io.connect(&#39;http://localhost:1337?cookie=smokeybear&#39;)</span>
</span><span class='line'>  <span class="c1">//</span>
</span><span class='line'>  <span class="c1">// (Un)fortunately, the user&#39;s cookie is (should!) not accessible in client-side js.</span>
</span><span class='line'>  <span class="c1">// Using HTTP-only cookies is crucial for your app&#39;s security.</span>
</span><span class='line'>  <span class="c1">// Primarily because of this situation, as well as a handful of other advanced</span>
</span><span class='line'>  <span class="c1">// use cases, Sails allows you to override the authorization behavior </span>
</span><span class='line'>  <span class="c1">// with your own custom logic by specifying a function, e.g:</span>
</span><span class='line'>  <span class="cm">/*</span>
</span><span class='line'><span class="cm">    authorization: function authorizeAttemptedSocketConnection(reqObj, cb) {</span>
</span><span class='line'>
</span><span class='line'><span class="cm">        // Any data saved in `handshake` is available in subsequent requests</span>
</span><span class='line'><span class="cm">        // from this as `req.socket.handshake.*`</span>
</span><span class='line'>
</span><span class='line'><span class="cm">        //</span>
</span><span class='line'><span class="cm">        // to allow the connection, call `cb(null, true)`</span>
</span><span class='line'><span class="cm">        // to prevent the connection, call `cb(null, false)`</span>
</span><span class='line'><span class="cm">        // to report an error, call `cb(err)`</span>
</span><span class='line'><span class="cm">    }</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="nx">authorization</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Match string representing the origins that are allowed to connect to the Socket.IO server</span>
</span><span class='line'>  <span class="nx">origins</span><span class="o">:</span> <span class="s1">&#39;*:*&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Should we use heartbeats to check the health of Socket.IO connections?</span>
</span><span class='line'>  <span class="nx">heartbeats</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// When client closes connection, the # of seconds to wait before attempting a reconnect.</span>
</span><span class='line'>  <span class="c1">// This value is sent to the client after a successful handshake.</span>
</span><span class='line'>  <span class="s1">&#39;close timeout&#39;</span><span class="o">:</span> <span class="mi">60</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// The # of seconds between heartbeats sent from the client to the server</span>
</span><span class='line'>  <span class="c1">// This value is sent to the client after a successful handshake.</span>
</span><span class='line'>  <span class="s1">&#39;heartbeat timeout&#39;</span><span class="o">:</span> <span class="mi">60</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// The max # of seconds to wait for an expcted heartbeat before declaring the pipe broken</span>
</span><span class='line'>  <span class="c1">// This number should be less than the `heartbeat timeout`</span>
</span><span class='line'>  <span class="s1">&#39;heartbeat interval&#39;</span><span class="o">:</span> <span class="mi">25</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// The maximum duration of one HTTP poll-</span>
</span><span class='line'>  <span class="c1">// if it exceeds this limit it will be closed.</span>
</span><span class='line'>  <span class="s1">&#39;polling duration&#39;</span><span class="o">:</span> <span class="mi">20</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Enable the flash policy server if the flashsocket transport is enabled</span>
</span><span class='line'>  <span class="c1">// &#39;flash policy server&#39;: true,</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// By default the Socket.IO client will check port 10843 on your server </span>
</span><span class='line'>  <span class="c1">// to see if flashsocket connections are allowed.</span>
</span><span class='line'>  <span class="c1">// The Adobe Flash Player normally uses 843 as default port, </span>
</span><span class='line'>  <span class="c1">// but Socket.io defaults to a non root port (10843) by default</span>
</span><span class='line'>  <span class="c1">//</span>
</span><span class='line'>  <span class="c1">// If you are using a hosting provider that doesn&#39;t allow you to start servers</span>
</span><span class='line'>  <span class="c1">// other than on port 80 or the provided port, and you still want to support flashsockets </span>
</span><span class='line'>  <span class="c1">// you can set the `flash policy port` to -1</span>
</span><span class='line'>  <span class="s1">&#39;flash policy port&#39;</span><span class="o">:</span> <span class="mi">10843</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Used by the HTTP transports. The Socket.IO server buffers HTTP request bodies up to this limit. </span>
</span><span class='line'>  <span class="c1">// This limit is not applied to websocket or flashsockets.</span>
</span><span class='line'>  <span class="s1">&#39;destroy buffer size&#39;</span><span class="o">:</span> <span class="s1">&#39;10E7&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Do we need to destroy non-socket.io upgrade requests?</span>
</span><span class='line'>  <span class="s1">&#39;destroy upgrade&#39;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Should Sails/Socket.io serve the `socket.io.js` client? </span>
</span><span class='line'>  <span class="c1">// (as well as WebSocketMain.swf for Flash sockets, etc.)</span>
</span><span class='line'>  <span class="s1">&#39;browser client&#39;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Cache the Socket.IO file generation in the memory of the process</span>
</span><span class='line'>  <span class="c1">// to speed up the serving of the static files.</span>
</span><span class='line'>  <span class="s1">&#39;browser client cache&#39;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Does Socket.IO need to send a minified build of the static client script?</span>
</span><span class='line'>  <span class="s1">&#39;browser client minification&#39;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Does Socket.IO need to send an ETag header for the static requests?</span>
</span><span class='line'>  <span class="s1">&#39;browser client etag&#39;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Adds a Cache-Control: private, x-gzip-ok=&quot;&quot;, max-age=31536000 header to static requests, </span>
</span><span class='line'>  <span class="c1">// but only if the file is requested with a version number like /socket.io/socket.io.v0.9.9.js.</span>
</span><span class='line'>  <span class="s1">&#39;browser client expires&#39;</span><span class="o">:</span> <span class="mi">315360000</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Does Socket.IO need to GZIP the static files?</span>
</span><span class='line'>  <span class="c1">// This process is only done once and the computed output is stored in memory. </span>
</span><span class='line'>  <span class="c1">// So we don&#39;t have to spawn a gzip process for each request.</span>
</span><span class='line'>  <span class="s1">&#39;browser client gzip&#39;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Optional override function to serve all static files, </span>
</span><span class='line'>  <span class="c1">// including socket.io.js et al.</span>
</span><span class='line'>  <span class="c1">// Of the form :: function (req, res) { /* serve files */ }</span>
</span><span class='line'>  <span class="s1">&#39;browser client handler&#39;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Meant to be used when running socket.io behind a proxy. </span>
</span><span class='line'>  <span class="c1">// Should be set to true when you want the location handshake to match the protocol of the origin. </span>
</span><span class='line'>  <span class="c1">// This fixes issues with terminating the SSL in front of Node </span>
</span><span class='line'>  <span class="c1">// and forcing location to think it&#39;s wss instead of ws.</span>
</span><span class='line'>  <span class="s1">&#39;match origin protocol&#39;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Direct access to the socket.io MQ store config</span>
</span><span class='line'>  <span class="c1">// The &#39;adapter&#39; property is the preferred method</span>
</span><span class='line'>  <span class="c1">// (`undefined` indicates that Sails should defer to the &#39;adapter&#39; config)</span>
</span><span class='line'>  <span class="nx">store</span><span class="o">:</span> <span class="kc">undefined</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// A logger instance that is used to output log information.</span>
</span><span class='line'>  <span class="c1">// (`undefined` indicates deferment to the main Sails log config)</span>
</span><span class='line'>  <span class="nx">logger</span><span class="o">:</span> <span class="kc">undefined</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// The amount of detail that the server should output to the logger.</span>
</span><span class='line'>  <span class="c1">// (`undefined` indicates deferment to the main Sails log config)</span>
</span><span class='line'>  <span class="s1">&#39;log level&#39;</span><span class="o">:</span> <span class="kc">undefined</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Whether to color the log type when output to the logger.</span>
</span><span class='line'>  <span class="c1">// (`undefined` indicates deferment to the main Sails log config)</span>
</span><span class='line'>  <span class="s1">&#39;log colors&#39;</span><span class="o">:</span> <span class="kc">undefined</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// A Static instance that is used to serve the socket.io client and its dependencies.</span>
</span><span class='line'>  <span class="c1">// (`undefined` indicates use default)</span>
</span><span class='line'>  <span class="s1">&#39;static&#39;</span><span class="o">:</span> <span class="kc">undefined</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// The entry point where Socket.IO starts looking for incoming connections. </span>
</span><span class='line'>  <span class="c1">// This should be the same between the client and the server.</span>
</span><span class='line'>  <span class="nx">resource</span><span class="o">:</span> <span class="s1">&#39;/socket.io&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>We’ve covered a bunch of material in this episode.  I hope you found it helpful and as always thanks for watching.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a sails application ep25 - What is CommonJS in relation to node? What does it do? How do I use it?]]></title>
    <link href="http://irlnathan.github.io/sailscasts/blog/2013/10/25/building-a-sails-application-ep25-what-is-commonjs-in-relation-to-node-what-does-it-do-how-do-i-use-it/"/>
    <updated>2013-10-25T17:45:00-05:00</updated>
    <id>http://irlnathan.github.io/sailscasts/blog/2013/10/25/building-a-sails-application-ep25-what-is-commonjs-in-relation-to-node-what-does-it-do-how-do-i-use-it</id>
    <content type="html"><![CDATA[<iframe width="640" height="390" src="http://www.youtube.com/embed/oS01dhrjR7s" frameborder="0" allowfullscreen></iframe>


<h1>Transcript</h1>

<p>Howdy.  Today I’m here to talk about my quest to understand the mysterious world of node module dependencies. The good news is, in the end, it’s really not very mysterious.  Hopefully, by the end of this screencast I’ll have answered:</p>

<p><img class="center" src="http://irlnathan.github.io/sailscasts/images/ep25.004.jpg"></p>

<p>Although I’ll be talking about CommonJS mainly from a node perspective this is completely relevant to sails in that you’ll be using the module pattern in your sails development.  If you’ve ever looked at the source of a node application you’ve come across some derivation of the following methods and objects.</p>

<p><img class="center" src="http://irlnathan.github.io/sailscasts/images/ep25.005.jpg"></p>

<p>Node applications are made up of modules, which are the equivalent of source text files.  Actually that’s not completely accurate, a module can also be a compiled node module file, but I’m getting ahead of myself.  Each module or text source file is its own domain and the objects, methods, variables, and classes contained in them are oblivious to other objects, methods, variables, and classes contained in other modules.  They are in effect private to the module file that contains them.  How do we make different module files aware of each other? That’s where the module pattern comes in and specifically node’s use of CommonJS.</p>

<p><img class="center" src="http://irlnathan.github.io/sailscasts/images/ep25.008.jpg"></p>

<p>The CommonJS implementation of the module pattern also protects the scope of your code to a particular module instead of opening up everything to a global scope. Therefore, only the modules that are connected in a way which I’m about to describe are aware of each other.</p>

<p>First a quick note on what CommonJS isn’t.  At first I got confused between RequireJS and CommonJS.  Although CommonJS does use a method named require, CommonJS and RequireJS are not the same thing.</p>

<p><img class="center" src="http://irlnathan.github.io/sailscasts/images/ep25.010.jpg"></p>

<p>My understanding is that RequireJS was created out of a need for a module loader within the browser as opposed to node which is running on the server.  Anyway, don’t make the same mistake I did and start reading the RequireJS documentation thinking it’s the same thing as what’s used in node..</p>

<p>Now on to the module pattern. This pattern consists of two basic steps. One of the steps involves “requiring” a module you want to include from one file while from the other file or module “exposing” the stuff that you want to make available to other modules.</p>

<p><img class="center" src="http://irlnathan.github.io/sailscasts/images/ep25.011.jpg"></p>

<p>I’m going to talk about the “require” part of pattern first. I think the best way to learn this stuff is through examples.  One of the early examples we’re exposed to in learning node is creating a server using the http module. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span><span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span><span class="err">‘</span><span class="nx">content</span><span class="o">-</span><span class="nx">type</span><span class="err">’</span><span class="o">:</span> <span class="err">‘</span><span class="nx">text</span><span class="o">/</span><span class="nx">plain</span><span class="err">’</span><span class="p">});</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="err">‘</span><span class="nx">Hello</span> <span class="nx">World</span><span class="err">’</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nx">server</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">3000</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>I want to focus on the first line: <code>var http= require(‘http’);</code>  This line creates a reference or variable to the module <code>http</code>.  This happens to be one of the modules that comes compiled with node.  Armed with our http variable we can now access everything that was exposed in that module via dot notation.  For example, that’s how access the <code>createServer</code> method.</p>

<p>However, let’s say we want to create our own module, how would we require it?  I’m going to explore several ways of requiring a module but one initial way is to use:</p>

<p><code>var utility = require('./myModule.js');</code></p>

<p>So let’s create a new file called index.js.</p>

<p>index.js</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">utility</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./myModule.js&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>&hellip;and I’ll paste our new require line into the file.  Breaking this down we have an arbitrary var named utility referencing a javascript file myModule.JS located in the same directory or relative path as index.js.  So before we starting using our new module, we need to create it.  So, next I’m going to create another file called myModule.js in the same directory with the following code.</p>

<p>myModule.js</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">balance</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">addDeposit</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">amount</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">amount</span> <span class="o">+</span> <span class="nx">balance</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">.</span><span class="nx">balance</span> <span class="o">=</span> <span class="nx">balance</span><span class="p">;</span>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">.</span><span class="nx">addDeposit</span> <span class="o">=</span> <span class="nx">addDeposit</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this file I added a var called <code>balance</code> and initialized it with a value of 100. Next I created a function <code>addDeposit</code>.  The last two lines are the important part.  I exposed the var balance by exporting it via <code>module.exports</code>.  I could have named the attribute something other than balance but by convention I’m going to use the same name as the actual var.  I did the same thing to expose the addDeposit function, that is using <code>module.exports</code>.</p>

<p>Now let’s go back to our index.js file and we’ll use our newly created module.</p>

<p>index.js</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">utility</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./myModule.js&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;The current balance is: &quot;</span><span class="p">,</span> <span class="nx">utility</span><span class="p">.</span><span class="nx">balance</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;With your deposit, your new balance is &quot;</span><span class="p">,</span> <span class="nx">utility</span><span class="p">.</span><span class="nx">addDeposit</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span><span class="o">+</span><span class="err">”</span><span class="p">.</span><span class="err">”</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>I can access the exported var and function from myModule through dot notation and my reference named utility.   In this case <code>utility.balance</code> for the balance and <code>utility.addDeposit(10)</code> for the function.  Again the use of the name utiityl is completely arbitrary, I could have named this reference foo. So let’s see this in action.</p>

<p>I’ll go to the terminal and type node index.js to launch our module.  And as we wanted the module returned the balance before and after the deposit.</p>

<p>Next, I’m going to expand this module to act like a class using a function as a constructor. Notice that in addition to the instance attributes and methods I also have class variables and methods (e.g. class_variable and class_method) that are not exposed via require.</p>

<p>myModule1.js</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">account</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">balance</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">class_variable</span> <span class="o">=</span> <span class="s2">&quot;Classy&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">class_method</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      
</span><span class='line'>    <span class="cm">/* Todo</span>
</span><span class='line'><span class="cm">     * Debit account a few cents each day and put it</span>
</span><span class='line'><span class="cm">     * Lumbergh&#39;s account</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Nothing to see here.&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">balance</span> <span class="o">=</span> <span class="nx">balance</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">addDeposit</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">deposit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">balance</span> <span class="o">+=</span> <span class="nx">deposit</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">account</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Keeping with the pattern after you expose or export the code you want to make available from your module, we’ll do the other step of the pattern by requiring the module. I’m creating a new file index1.js.</p>

<p>index1.js</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Account</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./myModule1.js&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">account</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Account</span><span class="p">(</span><span class="mi">200</span><span class="p">);</span>
</span><span class='line'><span class="nx">account</span><span class="p">.</span><span class="nx">deposit</span> <span class="o">=</span> <span class="mi">25</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;The current balance is: &quot;</span><span class="p">,</span> <span class="nx">account</span><span class="p">.</span><span class="nx">balance</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;With your deposit of &quot;</span> <span class="o">+</span> <span class="nx">account</span><span class="p">.</span><span class="nx">deposit</span> <span class="o">+</span> <span class="s2">&quot; your new balance is &quot;</span> <span class="o">+</span> <span class="nx">account</span><span class="p">.</span><span class="nx">addDeposit</span><span class="p">(</span><span class="nx">account</span><span class="p">.</span><span class="nx">deposit</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here I’m instantiating the Account class reference using the var account while passing in a new balance for the account as an argument.  The other change is adding a deposit attribute to the account instance.  Now, let’s see this in action.</p>

<p>I’ll go back to the terminal and type node index1.js to launch our module.  And as we wanted the module returned the balance before and after the deposit as well as the amount of the deposit itself.</p>

<p>Next I want to show an example of the pattern where we can instantiate the Account class from within the require statement itself.</p>

<p>First, we’ll create a new module named myModule2.js.</p>

<p>myModule2.js</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Account</span> <span class="o">=</span> <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">balance</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">balance</span><span class="o">:</span> <span class="nx">balance</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">deposit</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">addDeposit</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">deposit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">obj</span><span class="p">.</span><span class="nx">deposit</span> <span class="o">=</span> <span class="nx">deposit</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">deposit</span> <span class="o">+</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">balance</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>On line one I declare the var Account and do the export of the function in the same line of code.  I capitalized the A in Account to signify that it represents a class, however, this isn’t necessary to making any of this work and is strictly a convention.  I then build up an object that will eventually be returned when Account is instantiated.  Now let’s create index2.js:</p>

<p>index2.js</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">account</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./myModule2.js&#39;</span><span class="p">)(</span><span class="mi">2000</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">account</span><span class="p">.</span><span class="nx">addDeposit</span><span class="p">(</span><span class="mi">10</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="nx">account</span><span class="p">.</span><span class="nx">deposit</span> <span class="o">=</span> <span class="mi">25</span><span class="p">;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;The current balance is: &quot;</span><span class="p">,</span> <span class="nx">account</span><span class="p">.</span><span class="nx">balance</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;With your deposit of &quot;</span> <span class="o">+</span> <span class="nx">account</span><span class="p">.</span><span class="nx">deposit</span> <span class="o">+</span> <span class="s2">&quot; your new balance is &quot;</span> <span class="o">+</span> <span class="nx">account</span><span class="p">.</span><span class="nx">addDeposit</span><span class="p">(</span><span class="nx">account</span><span class="p">.</span><span class="nx">deposit</span><span class="p">)</span> <span class="o">+</span> <span class="err">“</span><span class="p">.</span><span class="err">”</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice in line one where we’re doing our usual require, in this case by putting the arguments on the end of the statement we’re actually creating a new instance of the Account class assigning it to account while passing the argument with a value of 2000.  Let’s see how this works.</p>

<p>The results this time reflect passing the initial balance in as an argument and we have access to our instance variables and method as expected.</p>

<p>The last example is where we export an object directly and I’m going to use our model in activityOverlord found in <code>api/models/User.js</code>.  Notice that we’re wrapping the entire file with module.exports.</p>

<p>myModule3.js</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * User</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @module      :: Model</span>
</span><span class='line'><span class="cm"> * @description :: A short summary of how this model works and what it represents.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">schema</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">attributes</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      
</span><span class='line'>      <span class="nx">name</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;string&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">required</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">title</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;string&#39;</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">email</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;string&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">email</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">required</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">unique</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">encryptedPassword</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;string&#39;</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">online</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;boolean&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">defaultsTo</span><span class="o">:</span> <span class="kc">false</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">admin</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;boolean&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">defaultsTo</span><span class="o">:</span> <span class="kc">false</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">toJSON</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">toObject</span><span class="p">();</span>
</span><span class='line'>      <span class="k">delete</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">password</span><span class="p">;</span>
</span><span class='line'>      <span class="k">delete</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">confirmation</span><span class="p">;</span>
</span><span class='line'>      <span class="k">delete</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">encryptedPassword</span><span class="p">;</span>
</span><span class='line'>      <span class="k">delete</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">_csrf</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">obj</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="nx">beforeValidation</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">values</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">values</span><span class="p">.</span><span class="nx">admin</span> <span class="o">!==</span> <span class="s1">&#39;undefined&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">values</span><span class="p">.</span><span class="nx">admin</span> <span class="o">===</span> <span class="s1">&#39;unchecked&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">values</span><span class="p">.</span><span class="nx">admin</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span>  <span class="k">if</span> <span class="p">(</span><span class="nx">values</span><span class="p">.</span><span class="nx">admin</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">===</span> <span class="s1">&#39;on&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">values</span><span class="p">.</span><span class="nx">admin</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>     <span class="nx">next</span><span class="p">();</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">beforeCreate</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">values</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// This checks to make sure the password and password confirmation match before creating record</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">values</span><span class="p">.</span><span class="nx">password</span> <span class="o">||</span> <span class="nx">values</span><span class="p">.</span><span class="nx">password</span> <span class="o">!=</span> <span class="nx">values</span><span class="p">.</span><span class="nx">confirmation</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">next</span><span class="p">({</span><span class="nx">err</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;Password doesn&#39;t match password confirmation.&quot;</span><span class="p">]});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;bcrypt&#39;</span><span class="p">).</span><span class="nx">hash</span><span class="p">(</span><span class="nx">values</span><span class="p">.</span><span class="nx">password</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="kd">function</span> <span class="nx">passwordEncrypted</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">encryptedPassword</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">return</span> <span class="nx">next</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">values</span><span class="p">.</span><span class="nx">encryptedPassword</span> <span class="o">=</span> <span class="nx">encryptedPassword</span><span class="p">;</span>
</span><span class='line'>      <span class="c1">// values.online= true;</span>
</span><span class='line'>      <span class="nx">next</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, we’ll require this module and take a look at a couple of its attributes.</p>

<p>index3.js</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">user</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./myModule3.js&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">user</span><span class="p">.</span><span class="nx">schema</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">user</span><span class="p">.</span><span class="nx">attributes</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let’s see it in action.  As expected we get back the attributes we requested via dot notation.</p>

<p>So where can I put modules?
Okay so    the last thing I want to cover is a more extensive look at where we can put modules and how to require them in these different locations.  As I mentioned at the beginning of the screencast there’s a distinction between node’s core modules and our own custom file modules we’ve been working with.  Core modules like <code>http</code> can be referenced by using just the module name (e.g. ‘http’).  For file modules we have a bunch of options.</p>

<p>So far, we’ve been accessing our modules via relative paths.  But we could also use an absolute path like:</p>

<p><code>var myModule = require(‘/home/api/foo.js’);</code></p>

<p>You can also require a file module without using ‘/’,  ‘./’ or ‘../’ however, the module must be placed in a node_modules folder. The node documentation has a good example I’ve included here.</p>

<p><img class="center" src="http://irlnathan.github.io/sailscasts/images/ep25.016.jpg"></p>

<p>So node will first look in the same directory where the file that it’s calling is located, in this example <code>/home/ry/projects/node_modules</code>.  If it doesn’t find it there it will traverse up the file system path until it either finds the node_modules folder and module or gets to the root of the path without finding it in which case returning a ‘module not found’ error.</p>

<h2>Folders as Modules</h2>

<p>The final area I want to look at is using Folders as Modules.  This happens when you want to provide a package or library that is organized using a directory structure with one entry point to the package or library.  For example, let’s say you have a new templating library superTemp and all of its supporting modules will be installed at the root of /superTemp.</p>

<p><img class="center" src="http://irlnathan.github.io/sailscasts/images/ep25.025.jpg"></p>

<p>You could require the library by using:</p>

<p><code>var superTemp = require(‘./superTemp’);</code></p>

<p>So what are my options for the entry point or the initial javascript file?  If I create a file index.js and put it in ‘./superTemp’, node will run that file first.  I could also use the extension index.node.  Finally, if I wanted to use a different name than index you can create a package.json file using the following syntax:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span> <span class="s2">&quot;name&quot;</span> <span class="o">:</span> <span class="s2">&quot;superTemp&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;main&quot;</span> <span class="o">:</span> <span class="s2">&quot;./superTemp/myCrazyNamingConventionDealWithIt.js&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So let’s see how that works.  I’ve set-up an admittedly contrived directory structure under this example 1 folder.  So we have a module index.js that requires another module, myModule.js in the otherDir folder. Notice that the parenthesis at the end of the statement which means we’ll be instantiating the function.  myModule.js is a just a function that logs “Our app is launched!”.   Finally, we have a file launcher.js that requires the folder /super_temp.  So now I’ll go to the terminal and type node launcher and we get our log message that our app has launched.</p>

<p>Now let’s go into the example two folder.  Again a contrived directory structure but here instead of an index.js file we have a package.json file.  The package.json file points to <code>myCrazyNamingConventionDealWithIt.js</code> module.  And like our other example that module points to myModule in the otherDir folder.  Let’s see what happens.  And again we get the expected results.</p>

<p>Okay gang, I know that was a bunch of stuff.  I hope it was helpful and thanks for watching as always.</p>

<h2>Websites referenced</h2>

<ul>
<li><a href="http://www.commonjs.org/">CommonJS</a></li>
<li><a href="http://requirejs.org/">RequireJS</a></li>
<li><a href="http://stackoverflow.com/questions/16521471/relation-between-commonjs-amd-and-requirejs">Relation between CommonJS, AMD and RequireJS? (stackoverflow)</a></li>
<li><a href="http://nodejs.org/api/modules.html">Node Docs on Modules</a></li>
<li><a href="http://openmymind.net/2012/2/3/Node-Require-and-Exports/">Node.js, Require and Exports</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a Sails Application: Ep24 - Correcting a publishUpdate event and adding a policy to the user controller's subscribe action]]></title>
    <link href="http://irlnathan.github.io/sailscasts/blog/2013/10/21/building-a-sails-application-ep24-correcting-a-publishupdate-event-and-adding-a-policy-to-the-user-controllers-subscribe-action/"/>
    <updated>2013-10-21T10:15:00-05:00</updated>
    <id>http://irlnathan.github.io/sailscasts/blog/2013/10/21/building-a-sails-application-ep24-correcting-a-publishupdate-event-and-adding-a-policy-to-the-user-controllers-subscribe-action</id>
    <content type="html"><![CDATA[<iframe width="640" height="390" src="http://www.youtube.com/embed/iF3y0AqDpLU" frameborder="0" allowfullscreen></iframe>


<h1>Transcript</h1>

<p>Howdy and welcome back.</p>

<p>I want to clean-up a use case that will unfortunately crash the server.  The situation occurs if a user creates an account and then while they are logged-in a different user with admin privileges deletes them from the database.  When the deleted user attempts to sign out the following server error occurs:
TypeError: Cannot read property &lsquo;name&rsquo; of undefined</p>

<p>This is because publishUpdate tries to send the user.name attribute and the user instance no longer exists.  This is an easy fix, let’s head over to the session controller.  We can wrap the userUpdate(), userPublish(), req.session.destroy(), and res.redirect() methods in an if statement that checks whether a user exists.  If the user doesn’t exist then we’ll just redirect to session/new via res.redirect(&lsquo;/session/new&rsquo;);</p>

<p>If the user does exist we’ll let just pass through to our existing logic. So now when we try to do the same use case, the browser is redirected to session/new.</p>

<p>One other change I want to make is to prevent the socket from subscribing to the user model events unless the user is authenticated.  To do this, we’ll modify the authenticated policy so that it looks for req.session.User, if it exists, the user is authenticated, and if not, we send a 403.  We’ll then use that policy in policies.js within the config folder for the subscription action of the user controller.  By doing this, the socket cannot subscribe to /user/subscribe unless the user is authenticated.  Let’s check it out.</p>

<p>So now, when the user logs in, the non-authenticated socket does not respond to the event because they are not yet authenticated and therefore not subscribed.  Once the other user logs in, however, they receive the original user’s logout event.</p>

<p>Thanks for watching.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a Sails Application: Ep23 - Adding real-time flash messages using real-time model events.]]></title>
    <link href="http://irlnathan.github.io/sailscasts/blog/2013/10/16/building-a-sails-application-ep23-adding-real-time-flash-messages-using-real-time-model-events/"/>
    <updated>2013-10-16T09:25:00-05:00</updated>
    <id>http://irlnathan.github.io/sailscasts/blog/2013/10/16/building-a-sails-application-ep23-adding-real-time-flash-messages-using-real-time-model-events</id>
    <content type="html"><![CDATA[<iframe width="640" height="390" src="http://www.youtube.com/embed/uvmPeuu2IYM" frameborder="0" allowfullscreen></iframe>


<h1>Transcript</h1>

<p>In this screencast, we’ll add a flash message that will  let all users know when someone logs-in, logs-out, is added or deleted.  So here, I’ve logged in on one browser normally and I’ll log in on another browser using  icognito mode&hellip;and there’s our flash message.  When I log out I see the flash message indicating the logout on the other browser.  Now I’ll create a new user account and we see the corresponding flash message.  Finally, I’ll delete the account and the flash message notifying us of the change is displayed..</p>

<p>So following our Real Time Model Events pattern from episodes 21 and 22, we’re already subscribed to the user class room and instance models.  We did that on the server-side by creating a subscribe action to our user controller which does the actual room subscriptions.  On the client-side within app.js we initiate the subscription by using: <code>socket.get('/user/subscribe');</code>which, similar to an http get, hits our subscribe action.</p>

<p>So now all we have to do is use the publish methods to let the socket of any browser tab know that one of our events has occurred.  First, let’s look at when the user logs-in. For that we’ll go into our session controller.  We’re already using publishUpdate to let the socket know that someone has logged in, now we can expand this object to pass the user.name and an action attribute with a value of ‘ has logged in.’</p>

<p>On the client side, I’m going to open app.js and add to our popularly named cometMessageReceivedFromServer method to include an if statement that checks whether the message.verb is not equal to destroy and if it’s not call the displayFlashActivity method. This method, plays a sound and then through jquery displays the flash message.</p>

<p>In order to set this up we need to do a couple of quick things.  First, I created a sounds folder which not surprisingly contain sound files.  And then since I want this sound available on every page I put the following tags in the layout.ejs file.</p>

<p>So let’s see if this works.  I’ll log-in and great, we get a slightly annoying sound and our flash message.</p>

<p>Back in the session controller’s destroy action, I’ll add an update when the user logs out. We expand the object again to include the user.name but this time an action attribute with the value of ‘ has logged out.’</p>

<p>Next, let’s open the User Controller’s create action and we’re already using <code>publishCreate(user)</code> to update our User Administration page.  So here I’ll just add the action attribute to the user object and we’ll be good to go.</p>

<p>Finally, let’s look at the destroy action of the user controller.  Here we’re using the publishDestroy method to let our User Administration page know that a user was destroyed.  The publishDestroy method only passes the id of the destroyed model, so I’m going to also use the publishUpdate method to pass the user.name and user.action to our client.</p>

<p>Now let’s see if this all works.</p>

<p>I have our two browsers open one in regular one in incognito mode.  I’ve logged into one side and now I’ll log into the other&hellip;there’s our flash message. When I log out we see the flash message. When I add a user we get the appropriate flash message. Finally, when I delete the user account, we’re notified of the event.</p>

<p>Although this all works, I’d really prefer that you have to be logged in order to receive the flash messages.  I’d also like the flexibility of making the activities persistent, that is saved to a database.  So in the next screencast we’ll refactor this code to do just that.</p>

<p>Thanks for watching.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a Sails Application: Ep22 - Manipulating the DOM based upon changes via Real Time Model Events.]]></title>
    <link href="http://irlnathan.github.io/sailscasts/blog/2013/10/10/building-a-sails-application-ep22-manipulating-the-dom-based-upon-changes-via-real-time-model-events/"/>
    <updated>2013-10-10T17:30:00-05:00</updated>
    <id>http://irlnathan.github.io/sailscasts/blog/2013/10/10/building-a-sails-application-ep22-manipulating-the-dom-based-upon-changes-via-real-time-model-events</id>
    <content type="html"><![CDATA[<iframe width="640" height="390" src="http://www.youtube.com/embed/oVrJ9NKjt0s" frameborder="0" allowfullscreen></iframe>


<h1>Transcript</h1>

<p>Howdy and welcome to the second part of these screencasts dealing with real-time events. In this episode we’ll implement much of the client side portion of our code.  As I said at the end of the last episode, you can implement your front-end, however, you’d like.  I’m just learning the front-end so I wanted to start with server-side views and then refactor what I’ve done to include a framework like backbone to transition into a single page application.  That, however, is for another day and here we’ll manipulate the DOM within our server-side views.</p>

<p>So let’s go back to the app.js file located in the <code>assets/linker/js</code> directory and our event listener for the event message.  As you may recall, within this file we’ve established a connection with the socket server, subscribed to our User model’s “class” room and “instance” room via <code>socket.get()</code>.  And we’re now awaiting message via <code>socket.on('message', function(){})</code>.</p>

<p>Now in addition to logging this message I want to make changes to the DOM depending upon the contents of the message.  To make the code cleaner, I’m going to define the callback function outside the event listener.</p>

<p>Once again I’m not the most imaginative person when it comes to function names and as proof of this I’m going to name the callback <code>cometMessageReceivedFromServer</code>.  This will be the method that will route our messages depending upon the model that is being updated. And we’ll define it down here at the bottom of the app.js file.  I’m still going to log the message for debug purposes but now I’m going to check if the message is coming from the user model and if it is I’m going to call a new custom method called updateUserInDom and pass it the userId and the message.</p>

<p><code>updateUserInDom</code> is going to determine which page will ultimately receive the changesand route it to the appropriate method for that page.  So in this case, the receiving page is <code>/user</code> or the User Administration Page and since the action or verb is update, we’re going to route the message to the <code>updateUser</code> method of an object called IndexPage. Remember these are all custom methods that I’m creating and have nothing to do with sails.</p>

<p>The <code>updateUser</code> method is where we’ll update the DOM to display the <code>icon-online.png or icon-offline.png</code> depending upon the value of loggedIn.  If you take a look at the index.ejs file under the <code>views/user</code> directory, I’m populating each row of DOM with two custom data attributes, data-id and data-model.  These are then used as jquery criteria for identifying DOM elements.  So we’ll find the row of the user id that we want to change and then replace the image src with the correct icon.  Let’s see if it works</p>

<p>As you can see, the login status icon changes immediately when another user logs in or out.</p>

<p>What about when a new user is created?  We want to update the User Administration Page with the new user or deleted user and their login status.</p>

<p>To do this we’ll use the <code>publishCreate and publishDestroy</code> methods.  So we head over to the create action of the user controller and insert the <code>publishCreate</code> method passing the created user as an argument. Then we’ll look at the destroy action and insert our <code>publishDestroy</code> method passing the id of the user that was destroyed.  That’s it for the server-side.  Back to the client and our app.js file.  We’ll start at our old friend <code>cometMessageReceivedFromServer</code> method.  From there we’ll proceed to the <code>updateUserInDom</code> method where the receiving page will again be <code>/user</code> or the User Administration page. But here we’ll two cases to our switch statement. One for the create action and one for the destroy action.  For the create action we’ll use the <code>addUser</code> method.  To clean things up and to show some functionality I’m going to use a template using the underscore library.  So let’s take a look at the template, which I’ve stored in the <code>linker/assets/templates</code> directory.</p>

<p>This template represents one row of the User Administration Page. Before using this template there were a few things I needed to set-up. The first was to add the underscore library to <code>linker/assets/js</code> directory.  Next, I made a slight change to the Gruntfile, changing the default template files to inject, from html to ejs.  Finally, because we are using a hidden form for the delete button action, we need to have access to the csrf token.  Since the template is added after the index.ejs page has been rendered on the server, we needed a way to get at the token.</p>

<p>There are several different ways this can be done (including make an ajax call to the server via a <code>/csrfToken</code> route). However,  I decided to make a change to the layout.ejs file appending the csrf token to my own namespaced attribute on the global window object.   That way when the layout.ejs file is rendered, my object will be appended to the page.</p>

<p> So back in the app.js file I’ve built up an object called obj with the user plus the csrf token we obtained from the layout.ejs file.</p>

<p>Here, I’m using jquery to grab the last tr on the page and apply the template after that last tr tag, passing in the necessary data for the template in our obj object.</p>

<p>But what about when a user is deleted?  That’s a lot easier. We’ll add the <code>destroyUser</code> method and use jquery to find the appropriate user and remove that row from the DOM.</p>

<p>Woah&hellip;let’s see if all that stuff worked.  I’ll restart the server and log myself in the first browser and create a user in the second browser and great&hellip;the user was added to the DOM with the correct login status.  Now I’ll log out and login as another user, and this time delete the user we just created&hellip;and both sides updated like we wanted.</p>

<p>There’s one more thing to add.  Each time the server comes up we want to make sure that the online attribute of each user is set to false.  For that we can the sails bootstrap config file.  Because I used an empty object as the first argument, all the users will be updated. The second argument is the attribute I want to update, in this case online is set to false.  Finally I’ll trigger the callback back to the middleware stack. Now every time you start  the server, users online attribute will be reset to false.</p>

<p>That was a long one.  For those of you who made it through, I hope it was informative and as always thanks for watching.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a Sails Application: Ep21 - Integrating socket.io and sails with custom controller actions using Real Time Model Events.]]></title>
    <link href="http://irlnathan.github.io/sailscasts/blog/2013/10/10/building-a-sails-application-ep21-integrating-socket-dot-io-and-sails-with-custom-controller-actions-using-real-time-model-events/"/>
    <updated>2013-10-10T17:21:00-05:00</updated>
    <id>http://irlnathan.github.io/sailscasts/blog/2013/10/10/building-a-sails-application-ep21-integrating-socket-dot-io-and-sails-with-custom-controller-actions-using-real-time-model-events</id>
    <content type="html"><![CDATA[<iframe width="640" height="390" src="http://www.youtube.com/embed/enyZYgjXRqQ" frameborder="0" allowfullscreen></iframe>


<h1>Transcript</h1>

<p>Before we get started, we need to update the current version of sails to 0.9.7.  To do this, we’ll open our package.json file.  In the sails dependency we’ll change the version from whatever version you currently have to ~0.9.7.  Go into your terminal and in the root of our project directory type npm install and you’ll be ready to go.</p>

<p>So I’m really excited to get started with this part of activityOverlord.  I’ll be taking us through, step-by-step, how sails makes use of web sockets to deliver real-time events in your application.</p>

<p>First, let’s take a look at what we’ll have accomplished by the end of this episode. So, I’m going to log-in&hellip;and we’re at our user administration page, and of course I show logged in by this check mark. In order to show this functionality I’m going to actually utilize two different browsers. One just a regular browser and another that’s in incognito mode. So now I’m going to log-in here as Nikola Tesla and I don’t know if you saw this on this side but Nikola Tesla’s status changed without me having to refresh the browser. So now focus your attention on this side of the screen and I’ll sign-out and you can see that old Nick’s status has been updated to offline. What about if we add a user, so now I’m going to sign up a new user and we’ll use our friend Aimee Mann and Aimee appears on our list as well as her login status. And will go ahead and sign her out. And then finally let’s go back in as Nikola Tesla and we’ll remove Amy from the list.  Which in turn is removed from the other listening browser. But how does sails do that and how can we accomplish it. And that’s what we’re going to go into during this episode.</p>

<h3>First let’s look at what we’ve learned so far…</h3>

<p>In <strong>Episode 18</strong>, I went over how to use plain jane node and socket.io. We learned that websockets are actually an extension of http.  And since an http server can’t send data unless a client has requested it, web sockets allow for a server to send data unsolicited… You know what let me stop for a second. No one is dumb enough or brave enough to use these crazy Keynote transitions that I’m using. I found them so funny that I’ve decided to use them throughout this presentation. So I hope you take them in the spirit they are given and that they don’t distract you too much from the content. Anyway, back to programming.</p>

<p>So the http server can’t send data unless the client has requested it and websockets allow for a server to send data unsolicited once an initial connection is made.  On the server side we built an http server with node, upgraded the http server to also act as a socket server and then on the client side we built up some html combined with javascript to connect to the server. Once the connection was made, any other client that connected would be eligible to send messages to the server which in turn emitted or broadcast those messages to the clients that were connected. We found out that part of a socket is just a unique id that identifies the socket or in our case the browser tab that is accessing the page.</p>

<p>Lastly, I showed how socket.io provides the concept of rooms that allow you to group sockets so that instead of messages going to all connected sockets, one can send messages only to those sockets that are associated with a room.</p>

<p>In <strong>Episode 20</strong>, I went over how sails can be used to emit messages based upon changes to a model using the rest blueprints.  That episode may have confused some folks, but after the next several episodes I encourage you to go back to episode 20 and it should make more sense.</p>

<h3>So how does sails add value to websockets and socket.io?</h3>

<p>Similar to the way it automates many of the tasks associated with building an MVC framework, sails automates many of the tasks associated with enabling real time events within the MVC pattern.</p>

<p>I learn better by examples, so let’s look at one of the many ways sails automates enabling real-time functionality.  I’ve named this functionality Real Time Model Events.  And let me be clear here, Real Time Model Events is my term, it’s not something to do with javascript standards or anything the sail’s team uses, I just needed a way to identify some functionality and Real Time Model Events worked for me.  I’d be curious, after you see this episode, whether the term was helpful or confusing to you.</p>

<p><strong>Okay but what the heck are Real Time Model Events?</strong>  Just like we create event handlers for DOM events using jquery, I’m going to show you a pattern to set-up event handlers for changes to models that get emitted to any socket that’s subscribed to the event.</p>

<p>Currently we have a User model in activityOverlord.  One of the attributes of that model is a boolean called online.  We want to know whenever the value of online changes so that we can provide a real-time update to the user administration page whenever a user logs in or out of the application. <strong>So where do we put our code?</strong></p>

<p>If you’ve experimented with creating a project in sails, you’ve already been running a socket server and connecting to it when you hit the initial sails welcome page.  Let’s check it out.</p>

<p>So I’m going to create a new sails project called socketExample.  I’m going to start the sails’s server, and open up a page next to the terminal. Notice the handshake log message in the terminal.  That’s our tab making a socket connection to the server. But where is that taking place?  Let’s take a look at the code in the socketExample project.  I want you to notice in the assets/linker/js directory we have a file added when we created this project called app.js.  This app.js file is there to get you up and running with websockets.  The structure of this file is purely optional but I’m going to use it as the base for the functionality in activityOverlord.</p>

<p>So here’s where we attempt to connect with the socket server. And then we listen for when this socket actually connects, and when it does, the socket starts listening for a message event from the server.</p>

<p>But wait, we didn’t create the socket server itself.  That’s because sails does this for you automatically.  You can have raw access to the socket.io server and client methods, but what I want to show you here is that a bunch of the work is done for you automatically if you choose to use it.</p>

<p><strong>So, how do I register an event for our User model, online attribute, to listen for changes?</strong>  We do that by using the following pattern.</p>

<p>The first step happens on the server-side within a controller.  This involves subscribing the socket to the model “class” room and/or subscribing the socket to the model instance rooms.  Remember, when I say socket, in this example, I’m talking about the page or browser tab that already connected to the socket server via var socket = io.connect(); back in our app.js file.</p>

<p>Now, <strong>You might be asking what’s the difference between subscribing to the model ‘class’ room versus the model ‘instance’ room?</strong>  Subscribing to the model “class” room will enable the socket to listen for  the creation of new model instances via a method called publishCreate().  Whereas subscribing to the instance class room enables the socket to listen for changes to existing models via the publishUpdate and/or publishDestroy methods. By the way, when you subscribe a socket to a model class room, that socket automatically gets introduced to the models instance room and will receive any changes via publishUpdate or publishDestroy.</p>

<p>So in activityOverlord we have a User model and we want to listen for the creation of new user’s as well as changes to existing users&hellip;so let’s leave all these cheesey transitions behind and go implement that in the code.</p>

<p>Here, we’re are in the user controller, and I’m going to add an action called subscribe.</p>

<p>Sails gives us access to the requesting socket via req.socket.  So, first I’m going to subscribe to the User’s “class” room by entering User.subscribe and passing in req.socket as an argument.  We’ve now subscribed to the User model class room.</p>

<p>Next, I’ll subscribe to the User model’s instance room by entering User.subscribe, again passing in the requesting socket via req.socket, but wait I need to pass a second argument, that being the existing instance user rooms or models.  No problem, I’ll just wrap these two subscribe methods in a find query method.  Now I can pass the returned users into the subscribe method as a second argument and we’ve now subscribed to the User model instance rooms.</p>

<p>But what about publishCreate, publishUpdate, and publishDestroy, where do we put those methods?</p>

<p>I’m going to come back to those methods in a minute, let’s move on in our pattern and address where we call our subscribe action.  For that we’re going to move from the server back to our client.  As you recall in app.js we’ve been notified by the socket server that a connection has been made and we’re now waiting on a message event.  This is where we’re going to use a new method called socket.get() and we’re going to use it to “hit” our subscribe action.</p>

<p><strong>You might be asking, I thought get was an http method, what does that have to do with sockets?</strong>  Sails allows you to make requests like you would using http.  You can not only make a get request over sockets, you can also use post, put, and destroy. I’m going to do a separate screencasts on using these methods but I wanted to mention that they were available.</p>

<p>So we’re back in app.js and here’s the code&hellip;that’s it, we’re now subscribed to both the class room and instance rooms of the User.model when each page is loaded.</p>

<p><strong>So let’s review.</strong>  We’ve connected to the socket server, we’ve subscribed to the User model class and instance rooms by calling the subscribe action of the UserController via socket.get and then within the subscribe action, subscribing to the user model by calling User.subscribe, and finally listening for message events from the socket server.  We can now return to our controllers and start sending messages to our sockets based upon additions and changes to our model.</p>

<p>We started out this screencast with a goal of letting users know when other users login via the User Administration page. So let’s get to the session controller and do just that.</p>

<p>So here we are in the create action of the session controller.  When a user authenticates, we’re going to let other users know by using the publishUpdate method.  We’re going to pass the user id as the first argument, and then an object which will contain the changes that we want to send to other sockets. In this case whether loggedIn is true or false and the userid.  Let’s try it out.</p>

<p>Okay, we have two browsers here, one in regular modeand  one in incognito mode with the chrome console open in both tabs.  I’m going to log into activityOverlord, which should trigger the publishUpdate and log it to the console.  But the message event is not showing up in the console, what’s up?  Well first let’s look at the terminal.  Woah there’s a bunch going on here.</p>

<p>First, don’t be confused by the fact that the version of sails is v0.9.4 and that I’m getting these errors about installing sails locally.  While creating these screencasts, I was using the development branch of sails in order to get the latest web socket functionality.  You should be on 0.9.5 which encompassed the development branch when this screencast was made.</p>

<p>There are however some interesting errors here.  Let’s take a look at this warning that we are trying to render a view (session/new) over sockets. If we look back at our subscribe action, we don’t have anything responding to our action.  Which is an important reminder that we should at least send back a 200 if the action is successful.  I’ll do that now.  But why are we getting a warning that we’re trying to render a view?  Ahh, let’s take a look at our policies.  The current policy that will affect our subscribe action is admin.  And when you take a look at that policy, it requires that we be authenticated before gaining access to the action.  And look what happens if we’re not authenticated.  We’re redirected to session/new which actually does render a view.</p>

<p>This is simple enough to fix.  We’ll just add subscribe to our flash policy.  Let’s see what happens.</p>

<p>I’ll reload the sails server, login in, and there’s our message in the console.  And if we look at it, the message contains the user.id and that loggedin is true&hellip;perfect.  Now you may ask why didn’t the browser that I logged in on also have a console message?  It actually did, however, after I logged in successfully, the browser  was redirected to the User Administration page which was refreshed instantly making it difficult to see the message before the browser refreshed.</p>

<p><strong>What about when the user logs out?</strong>  We’ll add a similar publishUpdate method within the delete action of the SessionController.  Instead of setting loggedIn as true will set it to false.  So after restarting the sails server, we’ll log out which produces a new message that has the loggedIn attribute set to false.</p>

<p>This is kind of the half-way point of this screencast.  In the next episode I’ll go over one way of handling the DOM manipulation on the client based upon the events we’re receiving from our socket.  See ya at the next screencast and thanks a lot for watching.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a Sails Application: Ep17a - Marshalling request parameters]]></title>
    <link href="http://irlnathan.github.io/sailscasts/blog/2013/09/24/building-a-sails-application-ep17a-marshalling-request-parameters/"/>
    <updated>2013-09-24T16:38:00-05:00</updated>
    <id>http://irlnathan.github.io/sailscasts/blog/2013/09/24/building-a-sails-application-ep17a-marshalling-request-parameters</id>
    <content type="html"><![CDATA[<p>In episode 17a you&rsquo;ll fix an issue by marshalling request parameters, that allowed a user to inject html to create an admin user.</p>

<iframe width="640" height="390" src="http://www.youtube.com/embed/TgiK34eDGOU" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
</feed>
